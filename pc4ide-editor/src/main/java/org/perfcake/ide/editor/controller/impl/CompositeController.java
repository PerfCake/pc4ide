/*
 *-----------------------------------------------------------------------------
 * pc4ide
 *
 * Copyright 2017 Jakub Knetl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-----------------------------------------------------------------------------
 */

package org.perfcake.ide.editor.controller.impl;

import java.util.Arrays;
import java.util.List;
import org.perfcake.ide.core.exec.ExecutionManager;
import org.perfcake.ide.core.model.factory.ModelFactory;
import org.perfcake.ide.editor.controller.AbstractController;
import org.perfcake.ide.editor.controller.Controller;
import org.perfcake.ide.editor.view.View;
import org.perfcake.ide.editor.view.factory.ViewFactory;

/**
 * Composite controller is a controller for multiple models.
 *
 * @author Jakub Knetl
 */
public abstract class CompositeController extends AbstractController {

    private List<Controller> controllers;

    /**
     * Creates new composite controller.
     *
     * @param controllers  controllers
     * @param modelFactory model factory
     * @param viewFactory  view factory
     */
    public CompositeController(ModelFactory modelFactory, ViewFactory viewFactory, Controller... controllers) {
        this(Arrays.asList(controllers), modelFactory, viewFactory);
    }

    /**
     * Creates new composite controller.
     *
     * @param controllers  controllers
     * @param modelFactory model factory
     * @param viewFactory  view factory
     */
    public CompositeController(List<Controller> controllers, ModelFactory modelFactory, ViewFactory viewFactory) {
        super(controllers.get(0).getModel(), modelFactory, viewFactory);
        if (controllers == null || controllers.isEmpty()) {
            throw new IllegalArgumentException("Controllers must be neither null nor empty.");
        }
        this.controllers = controllers;

        // override view generated by view factory
        this.view = createView();
    }

    /**
     * Creates view for this controller. This method bypasses creating view automatically using a view factory in
     * {@link AbstractController}.
     *
     * @return view
     */
    protected abstract View createView();

    @Override
    public boolean updateViewData() {
        boolean updated = false;

        for (Controller c : controllers) {
            updated = updated || c.updateViewData();
        }

        return updated;
    }

    @Override
    public void subscribeToDebugManager(ExecutionManager manager) {

        for (Controller c : controllers) {
            c.subscribeToDebugManager(manager);
        }
    }
}
