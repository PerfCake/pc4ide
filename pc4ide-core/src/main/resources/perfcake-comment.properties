#Javadoc for the perfcake components fields.
#Mon Feb 20 08:33:37 CET 2017
org.perfcake.reporting.Measurement.time=The last timestamp for what the measurement is valid.
org.perfcake.message.sender.SslSocketSender.keyStore=SSL key store location.
org.perfcake.reporting.destination.c3chart.C3ChartReport=Compiles the resulting chart report combiting all possible charts created now or during previous runs in the same target location.
org.perfcake.scenario.Scenario=Encapsulates whole test execution, contains all information necessary to run the test.
org.perfcake.message.sender.CoapSender.method=CoAP request method that the sender will use.
org.perfcake.util.properties.MandatoryProperty=Marks a PerfCake property as mandatory.
org.perfcake.reporting.destination.CsvDestination.dynamicAttributes=Some attributes might end with an asterisk, in such a case, we are not able to create output until the end of the test.
org.perfcake.debug.PerfCakeDebug.correlatedMessages=Number of received messages.
org.perfcake.util.ObjectFactory.pluginClassLoader=Cached plugin class loader.
org.perfcake.reporting.destination.ElasticsearchDestination.trustStorePassword=SSL trust store password.
org.perfcake.ide.core.model.components.ScenarioModel=Represents a PerfCake scenario model.
org.perfcake.message.sender.SslSocketSender.trustStore=SSL trust store location.
org.perfcake.message.sender.CoapSender.client=CoAP Java API client.
org.perfcake.message.sequence.ThreadIdSequence=Sequence that returns current thread id.
org.perfcake.reporting.reporter.accumulator.SlidingWindowHarmonicMeanAccumulator=Accumulates an harmonic mean over a set of the number of recently reported values.
org.perfcake.message.receiver.AbstractReceiver=Default implementation of basic receiver methods. We do not want them as default implementations\n in the interface because we want protected visibility of the fields.
org.perfcake.reporting.destination.CsvDestination.log=Logger.
org.perfcake.reporting.reporter.MemoryUsageReporter.BYTES_IN_MIB=MiB to bytes conversion factor.
org.perfcake.reporting.reporter.WarmUpReporter.checkingPeriodIndex=The index number of the checking period in which the current run is.
org.perfcake.message.generator.AbstractMessageGenerator.log=Our logger.
org.perfcake.reporting.destination.InfluxDbDestination.database=Name of InfluxDb database.
org.perfcake.reporting.reporter.MemoryUsageReporter.memoryLeakDetectionMonitoringPeriod=Determines the period in which a memory usage is gathered from the PerfCake agent.
org.perfcake.message.sequence.PrimitiveNumberSequence=Just an ever increasing number sequence. No tweaking available. Non-blocking.
org.perfcake.validation.ValidationManager.statistics=Stores validation results statistics.
org.perfcake.debug.PerfCakeDebug.resultsWritten=Number of results published to individual destinations.\n The key is in the format of &lt;reporter class name&gt;.&lt;destination class name&gt;.
org.perfcake.validation.RulesValidator.log=A logger for this class.
org.perfcake.message.sender.RequestResponseJmsSender.responseConnectionFactory=JMS connection factory property for the response reception.
org.perfcake.reporting.reporter.accumulator.MaxLongValueAccumulator.max=Sum of the reported values.
org.perfcake.reporting.reporter.RawReporter.outputFile=Output file.
org.perfcake.message.sender.CoapSender.requestType=CoAP request type that the sender will use.
org.perfcake.validation.ScriptValidator.engine=The name of the Java Script Engine.
org.perfcake.message.generator.profile.Profile=A custom message generation profile that specifies dynamic performance test parameters (no. of threads and speed).
org.perfcake.ScenarioExecution.log=Logger.
org.perfcake.reporting.reporter.AbstractReporter=Represents a basic reporter that makes sure that the contract defined as part of {@link Reporter} is held.\n The class is also well tested.
org.perfcake.reporting.reporter.MemoryUsageReporter.socket=Socket used to communicate with the PerfCake agent.
org.perfcake.validation.ValidationManager.allMessagesValid=True when all the messages were validated properly so far.
org.perfcake.reporting.ReportManager.resetLastTimes=Signaling the time based reporting thread to reset the recorded last reported times and start from scratch.
org.perfcake.reporting.Measurement.results=The map containing the named results.
org.perfcake.RunInfo.iterations=Number of the last iteration.
org.perfcake.reporting.ReportManager.runInfo=Current run info to control the measurement.
org.perfcake.message.sender.AbstractJmsSender.connectionFactory=JMS connection factory property.
org.perfcake.reporting.reporter.MemoryUsageReporter.memoryDumpFile=The name of the memory dump file created by PerfCake agent.
org.perfcake.reporting.destination.c3chart.C3Chart.name=Name of this chart.
org.perfcake.reporting.destination.ConsoleDestination.background=Background color code. Can be an empty string to turn this feature off, a single number 0-7,\n or three numbers between 0-255 separated by comma representing r, g, b channels.
org.perfcake.message.sender.SslSocketSender.trustStorePassword=SSL trust store password.
org.perfcake.common.TimeSlidingWindow.TemporalObject.time=The temporal information related to the object.
org.perfcake.message.sender.JdbcSender.log=The sender's logger.
org.perfcake.message.generator.RampUpDownGenerator.mainThreadCount=A maximal number of threads.
org.perfcake.message.sender.MqttSender.responseUserName=Response server user name.
org.perfcake.message.sequence.NumberSequence.value=Current sequence value.
org.perfcake.reporting.reporter.accumulator.SlidingWindowSumLongAccumulator=Accumulates a sum over a set of the number of recently reported values.
org.perfcake.message.sender.CommandSender.messageFrom=Specifies from where the message to send is taken.
org.perfcake.ide.core.model.properties.Value.value=Sets a new value.
org.perfcake.reporting.destination.c3chart.C3Chart=Represents a single C3 chart meta-data carrying all the information needed to represent the chart.
org.perfcake.validation.DictionaryValidator.indexCache=Cached directory index.
org.perfcake.message.sender.PlainSocketSender=Sends messages through a plain TCP socket.
org.perfcake.common.Period.periodType=Unit of the period.
org.perfcake.message.sender.AbstractJmsSender.replyToDestination=JMS replyTo destination.
org.perfcake.ide.core.model.properties.KeyValue.value=
org.perfcake.scenario.DslFactory.scenarioDefinition=The scenario definition loaded from the file.
org.perfcake.message.sender.MqttSender.mqttResponse=MQTT response.
org.perfcake.message.generator.RampUpDownGenerator.rampDownStepPeriod=A period after which the number of threads is changed by {@link org.perfcake.message.generator.RampUpDownGenerator\#rampDownStep} value.
org.perfcake.scenario.ReplayResults.gzip=Unzipper of the data.
org.perfcake.reporting.reporter.accumulator.AbstractTimeSlidingWindowAccumulator.accumulatorClass=Underlying accumulator class to calculate the result from values in the time window.
org.perfcake.message.generator.CustomProfileGenerator=Generates the messages according to provided custom profile.
org.perfcake.reporting.reporter.accumulator.MinAccumulator.min=Mininum of the reported values.
org.perfcake.reporting.reporter.ServiceTimeStatsReporter=Reports statistics of service time. This is the time between enqueuing the sender task and its completion.
org.perfcake.message.generator.DefaultMessageGenerator.monitoringPeriod=The period in milliseconds in which the thread queue is filled with new tasks.
org.perfcake.message.sender.ChannelSenderSocket.port=TCP or UDP port.
org.perfcake.message.correlator.GenerateHeaderCorrelator.CORRELATION_HEADER=Name of the correlation header.
org.perfcake.validation.ValidationManager.validationThread=An internal thread that takes one response after another and validates them.
org.perfcake.reporting.destination.CsvDestination.MissingStrategy.NULL=The missing values are replaced by <code>null</code> strings in the output.
org.perfcake.scenario.Scenario.log=Logger for this class.
org.perfcake.reporting.reporter.AbstractReporter.reportManager=ReportManager that owns this reporter.
org.perfcake.util.Utils=Holds useful utility methods used throughout PerfCake.
org.perfcake.ide.core.model.components.ReporterModel=Represents model of a Reporter PerfCake inspector.
org.perfcake.validation.DictionaryValidator.log=A logger for this class.
org.perfcake.message.sequence.FilesContentSequence.log=The sequence's logger.
org.perfcake.message.sender.AbstractJmsSender.log=The sender's logger.
org.perfcake.reporting.reporter.StatsReporter.WindowType.TIME=A window of a given time period.
org.perfcake.message.sender.RequestResponseJms11Sender.responseTarget=Where to read the responses from.
org.perfcake.message.sender.CommandSender=Invokes external command (specified by {@link \#target} property)\n in a separate process to send the message payload (if message is specified) passed to the standard input of\n the process or as the command argument.
org.perfcake.ide.core.docs.DocServiceImpl=Docs service implementation. It uses properties files with parsed javadocs from the PerfCake to\n get documentation.
org.perfcake.debug.PerfCakeDebug.AGENT_NAME=Name of the debug agent. Determines the property key in JMX. Defaults to perfcake-1. Important when multiple instances were running.
org.perfcake.validation.RulesValidatorHelper.DSL=Constant to hold the DSL language file name in the virtual Drools file system.
org.perfcake.message.sender.JmsSender.log=The sender's logger.
org.perfcake.debug.PerfCakeDebug.generatedSenderTasks=How many sender tasks were created so far.
org.perfcake.reporting.destination.CsvDestination=Appends a {@link org.perfcake.reporting.Measurement} into a CSV file.
org.perfcake.scenario.ReplayResults.firstTime=Artificial test start time.
org.perfcake.message.generator.RampUpDownGenerator.Phase=Phase of the generator.
org.perfcake.message.Message.headers=Headers of the message.
org.perfcake.message.sender.ScriptSender=Passes messages to a script compatible with Java Script Engine compliant with JSR-223.\n The script gets three bounded variables - message, measurementUnit and log. None of them are suitable to be changed.
org.perfcake.reporting.destination.CsvDestination.expectedAttributes=A comma separated list of expected attributes, that should be present in measurement to be published.
org.perfcake.message.ReceivedMessage=Holds the couple of sent message and response recorded for it. This is used mainly for validation.
org.perfcake.ide.core.docs.DocsService=<p>DocsService allows to obtain documentation for PerfCake components and other PerfCake objects.\n It allows you to parse\:</p>\n <ol>\n     <li>documentation of any PerfCake class or interface</li>\n     <li>documentation of any field of PerfCake class or interface</li>\n </ol>\n\n <p>Fields may be detected by their corresponding set method in addition to actuall fields of a class. In other words, if class contains\n method setX(), but it has no field X, this service will return documentation of x getter or setter method.</p>
org.perfcake.reporting.destination.ChartDestination.buffer=Holds the data when the dynamic attributes are used and we cannot stream directly to a file.
org.perfcake.message.generator.AbstractMessageGenerator.reportManager=Report manager.
org.perfcake.message.sender.AbstractSocketSender.socket=The socket for sending.
org.perfcake.reporting.MeasurementUnit.timeStarted=When the measurement was first started in real time (timestamp value from {@link System\#currentTimeMillis()}).
org.perfcake.scenario.XmlFactory=Loads the scenario from an XML file.
org.perfcake.reporting.reporter.accumulator.Range.min=Left border of the range.
org.perfcake.message.sender.HttpsSender=Sends messages via HTTPs protocol.
org.perfcake.ide.core.components.PerfCakeComponent.api=Class of the inspector interface.
org.perfcake.ide.core.model.AbstractModel.implementationProperties=List of properties, which are specific for current inspector implementation. This list should never be accessible to\n the client code. All implementation properties should be contained also in properties Map. This list only points to the keys\n in the map to be able to recognize which properties were added on implementation class change.
org.perfcake.message.sender.CamelSender.MessageProcessor=Sender of outbound messages (including their headers).
org.perfcake.PerfCakeException=Indicates generic problems in PerfCake.
org.perfcake.reporting.destination.c3chart.C3ChartDataFile.target=Target path for storing all data files related to the chart. These are the data itself (.js), the description file (.dat),\n and the quick view file (.html).
org.perfcake.message.sender.CamelSender.endpoint=Cached endpoint string from target with replaced placeholders.
org.perfcake.PerfCakeConst.REPLAY_PROPERTY=Name of the system property that stores the path to the raw recording to be replayed.
org.perfcake.validation.RulesValidatorHelper.kieContainer=KIE container that holds all Drools related data.
org.perfcake.message.sender.HttpSender=Sends messages via HTTP protocol.
org.perfcake.message.sender.DummySender.log=The sender's logger.
org.perfcake.scenario.ScenarioBuilder=A Java based builder for creating {@link org.perfcake.scenario.Scenario} instance, which can be run by {@link org.perfcake.ScenarioExecution}.
org.perfcake.reporting.reporter.GeolocationReporter.geolocation=The actual values obtained from the service.
org.perfcake.validation.ValidationManager.fastForward=Unless specified in the scenario, the validation thread has some sleep for it not to influence measurement.\n At the end, when there is nothing else to do, we can go through the remaining responses faster.
org.perfcake.reporting.reporter.StatsReporter.averageEnabled=A property that determines if the metric of an average value is enabled or disabled.
org.perfcake.message.sender.GroovySender.classpath=Classpath for groovy executable - specifies where to find the class files.
org.perfcake.message.generator.SenderTask.correlator=Correlator to correlate message received from a separate channel.
org.perfcake.validation.ValidatorUtil.Operator.STARTS_WITH=Uses {@link java.lang.String\#startsWith(String)}.
org.perfcake.model.Scenario.Generator=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n       &lt;/sequence>\n       &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="threads" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.sender.RequestResponseJmsSender.autoAck=Indicates whether the JMS message is auto-acknowledged by the receiver (true) or by client (false).
org.perfcake.reporting.reporter.accumulator.MaxAccumulator=Accumulates the maximum of double values.\n Atomic types are not used because both values must be set at the same time. Hence the methods are synchronized.
org.perfcake.reporting.destination.ConsoleDestination.intro=Precomputed output prefix.
org.perfcake.reporting.destination.CsvDestination.MissingStrategy=Determines the strategy for a case that the value of an expected attribute in report to be published is missing.
org.perfcake.reporting.destination.c3chart.C3Chart.combined=True when this chart was created as a combination of another charts.
org.perfcake.message.sender.AbstractSender.target=The target where to send the messages.
org.perfcake.validation.ScriptValidator.scriptFile=Location of the file with the script.
org.perfcake.scenario.Scenario.reportManager=Report manager.
org.perfcake.ScenarioExecution.commandLine=Command line parameters.
org.perfcake.ide.core.model.Property.propertyInfo=
org.perfcake.message.sender.AbstractJmsSender.password=JMS password.
org.perfcake.message.generator.SenderTask.sequenceManager=A reference to the current sequence manager. This is used for determining message specific sequence values.
org.perfcake.reporting.reporter.StatsReporter.requestSizeEnabled=True when request size reporting is enabled.
org.perfcake.reporting.destination.ElasticsearchDestination.tags=Comma separated list of tags to be added to results.
org.perfcake.message.sender.MessageSenderManager.availableSenders=Senders available to send messages.
org.perfcake.ide.core.model.properties.Value=Represents a properties store of a value.
org.perfcake.PerfCakeConst.ERR_SCENARIO_LOADING=Exit code when it was not possible to parse scenario properly.
org.perfcake.message.generator.DefaultMessageGenerator.senderTaskQueueSize=The size of internal queue of prepared sender tasks. The default value is 1000 tasks.
org.perfcake.message.sender.RequestResponseJmsSender.receivingTimeout=Timeout for receiving the response in ms for a single attempt.
org.perfcake.ide.core.model.PropertyContainerImpl.properties=Properties in the container.
org.perfcake.message.generator.CustomProfileGenerator.autoReplay=True iff we should start from the beginning when we hit the maximal defined profile time/iteration.
org.perfcake.RunInfo.threads=Number of threads that is currently used to generate the load.
org.perfcake.reporting.destination.InfluxDbDestination=Writes the resulting data to InfluxDb using a simple HTTP REST client.\n The reported data have information about the test progress (time in milliseconds since start, percentage and iteration),\n real time of each result, and the complete results map. Quantities are stored without their unit.\n Supports SSL connection. The database is by default created on connection.
org.perfcake.validation.ValidatorUtil=Utilities used for messages validation. Used by the rules for {@link org.perfcake.validation.RulesValidator}.
org.perfcake.message.sender.AbstractJmsSender.MessageType.STRING=String message.
org.perfcake.message.MessageTemplate.validatorIds=The list of validator references that should be used to validate a response to this message.
org.perfcake.reporting.reporter.Reporter.runInfo=Sets {@link org.perfcake.RunInfo Run Info} for the current measurement run. This must be set\n prior to starting the reporter. Failed to do so can lead to an assertion error.
org.perfcake.message.generator.SenderTask.interruptWarningDisplayed=Limit the number of warning about interrupted response receival at the end of the test.
org.perfcake.reporting.reporter.accumulator.LastValueAccumulator.lastValue=Last remembered value.
org.perfcake.reporting.destination.ChartDestination.chartHeight=Height of the resulting chart in pixels.
org.perfcake.message.generator.profile.AbstractProfile.requests=Storage of all profile requests.
org.perfcake.ide.core.components.ComponentLoaderImpl=Component loader tries to load component by its fully qualified domain name (FQDN). If only name of the component is used, then\n it tries to load component from the default package.
org.perfcake.validation.MessageValidator=A contract of a message validator.
org.perfcake.message.sequence.NumberSequence.start=Beginning of the sequence.
org.perfcake.reporting.MeasurementUnit.measurementResults=Custom results reported by a sender.
org.perfcake.message.sequence.SequenceManager.sequences=Registry of sequences.
org.perfcake.validation.ValidationManager.enabled=True when the validation is enabled.
org.perfcake.message.receiver.AbstractAutoSpawnReceiver.receiverThreads=Pool of receiver threads.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.histogram=Histogram instance to store the data.
org.perfcake.debug.PerfCakeDebug.messageGeneratorClass=Class name of the generator used.
org.perfcake.message.MessageTemplate=Holds a message template based on a provided sample, keeps references to configured validators and renders the message before it is actually sent.\n Rendering means properties substitution in the message payload.\n Logging is very minimalistic as this class is very simple and we want to maximize its performance.
org.perfcake.PerfCakeConst.DEBUG_OPT=Name of the cli argument to start debugging agent.
org.perfcake.reporting.destination.CsvDestination.lineBreak=New output line delimiter.
org.perfcake.ide.core.model.properties.KeyValue.key=
org.perfcake.reporting.destination.CsvDestination.AppendStrategy.OVERWRITE=The original file is overwritten.
org.perfcake.util.StringTemplate.StringMill.preNull=Is the previous character masked? Simulates consumption of the previous character.
org.perfcake.PerfCakeConst.LOGGING_LEVEL_OPT=Name of the CLI argument to specify PerfCake logging level.
org.perfcake.message.sender.JdbcSender=Sends SQL queries via JDBC.
org.perfcake.message.sequence.TimeStampSequence=Sequence that returns current timestamp.
org.perfcake.reporting.destination.ChartDestination.helper=Helper to control the chart generation.
org.perfcake.validation.ValidatorUtil.Occurrence.EXACTLY=Exactly the specified number of messages exists.
org.perfcake.scenario.ReplayResults.ReplayRunInfo=A replacement of original {@link RunInfo} that allows us to create a notion of\n artificial time flow and report time bounded results in a faster replay mode.
org.perfcake.RunInfo.duration=How long is this measurement scheduled to run in milliseconds or iterations.\n Another {@link org.perfcake.common.PeriodType Period Types} do not make any sense here.
org.perfcake.validation.FileQueue=Stores items persistently to specified file.
org.perfcake.message.sender.AbstractJmsSender.qcf=JMS destination connection factory.
org.perfcake.message.sender.RequestResponseJmsSender.rcf=JMS destination connection factory for response reception.
org.perfcake.reporting.destination.ElasticsearchDestination.keyStore=SSL key store location.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.percentileFormatString=Format of the percentile expression.
org.perfcake.PerfCakeConst.REQUEST_SIZE_TAG=Result name of the total size of request.
org.perfcake.reporting.reporter.StatsReporter.maximumEnabled=A property that determines if the metric of a maximal value is enabled or disabled.
org.perfcake.reporting.destination.ElasticsearchDestination.keyStorePassword=SSL key store password.
org.perfcake.util.StringTemplate.patternSize=Compiled data of the template. Number of replacements in the template.
org.perfcake.scenario.Scenario.sequenceManager=Sequence manager.
org.perfcake.PerfCakeConst.RESPONSE_SIZE_TAG=Result name of the total size of response.
org.perfcake.reporting.reporter.StatsReporter.WindowType=The type of the window, either the number of iterations or a time duration.
org.perfcake.validation.RulesValidator=Validates the message with the defined Drools rules. There is a custom DSL file making the rules specification easier.
org.perfcake.scenario.ScenarioLoader=Loads {@link org.perfcake.scenario.Scenario} instance, which can be run by {@link org.perfcake.ScenarioExecution} based on its file type.
org.perfcake.message.sender.Jms11Sender.sender=JMS destination sender.
org.perfcake.message.generator.SenderTask=Executes a single task of sending messages from the message store\n using instances of {@link MessageSender} provided by message sender manager (see {@link org.perfcake.message.sender.MessageSenderManager}),\n receiving the message sender's response and handling the reporting and response message validation.\n Sender task is not part of the public API, it is used from generators.
org.perfcake.common.BoundPeriod.binding=The object bound to this period.
org.perfcake.reporting.destination.InfluxDbDestination.measurement=Name of the measurement in InfluxDb, serves as a database table.
org.perfcake.docs.doclet.JavadocComponentParser.JAVADOC_PROPERTIES_FILE=Properties file.
org.perfcake.PerfCakeConst.SKIP_TIMER_BENCHMARK_PROPERTY=Name of the system property that stores the skip timer benchmark option.
org.perfcake.util.StringUtil=Utility class to work with strings.
org.perfcake.validation.ValidationManager.expectLastMessage=When true, the validation thread just waits for the input queue to become empty and ends.
org.perfcake.PerfCakeConst.ERR_SCENARIO_REPLAY=Error while trying to replay scenario.
org.perfcake.reporting.ReportingException=Indicates problems while reporting results.
org.perfcake.message.sender.RequestResponseJms11Sender.responseCtx=JMS initial context for response reception.
org.perfcake.message.generator.CustomProfileGenerator.profile=The profile instance.
org.perfcake.message.sender.Jms11Sender.session=JMS session.
org.perfcake.common.TimestampedRecord.timestamp=Time stamp.
org.perfcake.PerfCakeConst.WELCOME=PerfCake welcome greeting.
org.perfcake.scenario.ReplayResults.lastTime=Artificial test last reporting time.
org.perfcake.reporting.destination.c3chart.C3Chart.xAxis=The legend of the X axis of this chart.
org.perfcake.reporting.destination.ChartDestination.autoCombine=True when we will automatically combine previous chart reports with the new one.
org.perfcake.reporting.reporter.MemoryUsageReporter.memoryLeakDetected=A flag that indicates that a possible memory leak has been detected.
org.perfcake.message.sequence.FileLinesSequence.log=The sequence's logger.
org.perfcake.validation.ValidationManager.validationTasks=A queue with the validation tasks.
org.perfcake.ide.core.model.AbstractModel.pcs=Support for sending property change events.
org.perfcake.message.sender.RequestResponseJms11Sender.rcf=JMS destination connection factory for response reception.
org.perfcake.message.generator.AbstractMessageGenerator.correlator=Correlates received messages with the sent ones. Null means that it is unused.
org.perfcake.message.sender.RequestResponseJms11Sender.correlationId=Correlation ID of this sender instance for it to read only the messages that it has sent.
org.perfcake.message.sender.MqttSender=Sends messages to an MQTT endpoint using Fusesource MQTT client.
org.perfcake.scenario.ReplayResults=Replays the results previously recorded with {@link org.perfcake.reporting.reporter.RawReporter}. The same\n scenario should be used, and its reporting section will be used to configure reporters and destinations.\n Then the normal reporting operation is emulated to achieve repeatable results.
org.perfcake.reporting.reporter.accumulator.AbstractTimeSlidingWindowAccumulator.log=Logger of this class.
org.perfcake.ide.core.model.components.MessageModel=Model of PerfCake message.
org.perfcake.validation.ValidatorUtil.Operator=Validation operator applied to message part and validated value.
org.perfcake.message.sender.ChannelSender.messageBuffer=Buffer for writing to and reading from NIO channel.
org.perfcake.common.TimestampedRecord=A recorded number matching with a particular time stamp.\n The record has a time stamp and a value. Instances are immutable.
org.perfcake.message.sender.RequestResponseJmsSender.responseContext=JMS context for receiving the response.
org.perfcake.reporting.destination.CsvDestination.buffer=Holds the data when the dynamic attributes are used and we cannot stream directly to a file.
org.perfcake.reporting.reporter.StatsReporter.windowType=The type of the window, either the number of iterations or a time duration.
org.perfcake.ide.core.model.PropertyInfo.model=Model to which property described by this propertyInfo instance belongs.
org.perfcake.message.sender.JmsSender.context=JMS context.
org.perfcake.PerfCakeConst.USAGE_HELP=Help on PerfCake command line usage.
org.perfcake.reporting.reporter.ClassifyingReporter.attribute=Message attribute the values of which should be classified and counted.
org.perfcake.message.sender.AbstractJmsSender.MessageType=JMS message type.
org.perfcake.reporting.destination.CsvDestination.missingStrategy=A strategy that determines the destination's behavior for a case that the value of an expected attribute in report to be published is missing.
org.perfcake.ide.core.model.PropertyContainerImpl.model=Model which owns this container.
org.perfcake.reporting.reporter.WarmUpReporter.minimalWarmUpCount=Minimal iteration count executed during the warm-up period.
org.perfcake.scenario.Scenario.messageSenderManager=Manager of message senders.
org.perfcake.message.sender.MessageSenderManager.allSenders=All the senders created including those actually busy.
org.perfcake.message.MessageTemplate.message=Original message sample.
org.perfcake.message.sender.MqttSender.responseQos=Response quality of service.
org.perfcake.reporting.destination.ChartDestination.group=Group of this chart. Charts in the same group can be later matched for the column names.
org.perfcake.message.Message.payload=Message payload.
org.perfcake.reporting.reporter.accumulator.AvgAccumulator=Accumulates an arithmetic average.\n Atomic types are not used because both values must be set at the same time. Hence the methods are synchronized.
org.perfcake.message.sender.JdbcSender.password=JDBC password.
org.perfcake.ide.core.exception.ModelDirectorException=Created by jknetl on 9/28/16.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.detail=Detail level of the result (the number of iteration steps per half-distance to 100%).\n Must be greater than 0.
org.perfcake.message.generator.profile.AbstractProfile.maxEntry=Maximal time value in among the request entries.
org.perfcake.ide.core.model.properties.KeyValue.any=
org.perfcake.reporting.reporter.accumulator.Range.max=Right border of the interval.
org.perfcake.common.TimeSlidingWindow.TemporalObject=Carries object with a temporal information.
org.perfcake.debug.PerfCakeDebug.messageSenderClass=Class name of the sender used.
org.perfcake.ScenarioExecution=Parses command line parameters, loads the scenario from XML or DSL file and executes it.
org.perfcake.reporting.reporter.accumulator.HarmonicMeanAccumulator.count=Number of reported values.
org.perfcake.scenario.XmlFactory.scenario=Parsed scenario object.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.correctionMode=The correction of coordinated omission in the resulting histogram.\n {@link Correction\#AUTO} is the default value and this means that the histogram is corrected\n by the average measured value.
org.perfcake.reporting.destination.c3chart.C3Chart.baseName=Base of the file name of the chart file. E.g. from '/some/path/data/stats201501272232.js' it is just 'stats201501272232'.
org.perfcake.message.ReceivedMessage.messageAttributes=Snapshot of sequences' values and possible other attributes used for sending a message. These attributes can be used by a validator to replace placeholders.
org.perfcake.reporting.destination.ElasticsearchDestination.log=Our logger.
org.perfcake.message.sender.RequestResponseJmsSender.responsePassword=JMS password used for the response reception.
org.perfcake.message.generator.profile.AbstractProfile.autoReplay=True iff we should start from the beginning when we hit the maximal defined profile time/iteration.
org.perfcake.reporting.destination.AbstractDestination=Common ancestor simplifying Destination development. Just stores the parent reporter for later use.
org.perfcake.ide.core.model.PropertyContainer=Property container maintains collection of properties.
org.perfcake.ide.core.model.AbstractProperty.model=Model object which owns this property value. This field is set by adding Property into {@link PropertyContainer} which is part\n of some model.
org.perfcake.common.Period=A certain amount of units of a given type. These units are represented\n by {@link org.perfcake.common.PeriodType}, i.e. {@link org.perfcake.common.PeriodType\#TIME time},\n {@link org.perfcake.common.PeriodType\#ITERATION iterations} or {@link org.perfcake.common.PeriodType\#PERCENTAGE percents}.\n Period is an immutable type.
org.perfcake.message.generator.DefaultMessageGenerator.shutdownPeriod=During a shutdown, the thread queue is regularly checked for the threads finishing their work.\n If the same amount of threads keeps running for this period, they are forcefully stopped.\n The unit of this value is milliseconds. The default value is 5000ms.
org.perfcake.validation.ValidatorUtil.MessagePart.HEADER=Message header.
org.perfcake.reporting.reporter.accumulator.TimeSlidingWindowSumAccumulator=Accumulates sum over a set of recently reported values.
org.perfcake.reporting.destination.c3chart.C3ChartDataFile.log=A logger for the class.
org.perfcake.scenario.ReplayResults.runInfo=Fake information about the run.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.maxExpectedValue=The maximum expected value to better organize the data in the histogram. The response time\n reported must never exceed this value, otherwise the result will be skipped, an error reported and the\n output will be invalid. -1 turns the optimization off. It is valuable to set some reasonable number like\n 3_600_000 which equals to the resolution from 1 millisecond to 1 hour.
org.perfcake.message.sender.AbstractJmsSender.safePropertyNames=Use safe message property names because some messaging implementations do not allow anything but valid Java identifiers.
org.perfcake.reporting.reporter.accumulator.SlidingWindowMinAccumulator=Accumulates a minimal value over a set of the number of recently reported values.
org.perfcake.util.StringTemplate.defaults=Compiled data of the template. Default values of properties.
org.perfcake.reporting.destination.ChartDestination.yAxis=Y axis legend.
org.perfcake.reporting.destination.ElasticsearchDestination.index=Elasticsearch index name.
org.perfcake.reporting.destination.InfluxDbDestination.createDatabase=Creates the database when connected. Requires admin privileges in InfluxDb.
org.perfcake.reporting.reporter.WarmUpReporter.warmed=The flag indicating whether the tested system is considered warmed up.
org.perfcake.reporting.destination.CsvDestination.fileHeaders=Cached headers in the CSV file.
org.perfcake.reporting.MeasurementUnit.failure=Failure that happened during processing of this task.
org.perfcake.message.sender.CommandSender.process=Reference to a process where the command is executed.
org.perfcake.message.sequence.RandomSequence.rnd=Random number generator.
org.perfcake.message.generator.AbstractMessageGenerator.executorService=The executor service used to run the threads.
org.perfcake.message.sequence.NumberSequence.cycle=True when we should cycle over from the beginning when we reached the end.
org.perfcake.reporting.destination.c3chart.C3ChartDataFile.dataFile=The JavaScript file representing chart data. This is not set for charts created as a combination of existing ones.
org.perfcake.PerfCakeConst.DEBUG_AGENT_DEFAULT_NAME=Default name of the debug agent.
org.perfcake.message.Message=Carries a message to be sent and all possible properties any communication endpoint might use or require.\n A sender implementation is not obliged to work with all the attributes.
org.perfcake.model.HeaderType=<p>Java class for headerType complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType name\="headerType">\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;attribute name\="name" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.sequence.FileLinesSequence.lines=Content of the input file as an array of lines.
org.perfcake.scenario.XmlFactory.scenarioModel=DOM model of the scenario.
org.perfcake.model.Scenario.Receiver=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="correlator">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                 &lt;/sequence>\n                 &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="source" type\="{http\://www.w3.org/2001/XMLSchema}string" minOccurs\="0"/>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n       &lt;/sequence>\n       &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="threads" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.ide.core.model.convertor.XmlConverter=XmlConvertor can convert model between pc4ide model and perfcake model.
org.perfcake.message.sender.RequestResponseJmsSender.responseJndiContextFactory=JNDI context factory property for the response reception.
org.perfcake.ide.core.components.ReflectionComponentCatalogue.components=Map of componets type and their implementations.
org.perfcake.reporting.destination.c3chart.C3Chart.COLUMN_ITERATION=Name of the iteration column.
org.perfcake.reporting.reporter.MemoryUsageReporter.requestWriter=Writer to send requests to PerfCake agent.
org.perfcake.message.sender.CommandSender.messagePayload=The message payload that is passed to the command to send it.
org.perfcake.ide.core.components.PerfCakeComponent.defaultPackage=Default package for implementation classes.
org.perfcake.PerfCakeConst.DEFAULT_ENCODING_PROPERTY=Name of the system property that stores name of the default String encoding.
org.perfcake.reporting.reporter.WarmUpReporter.maximalWarmUpDuration=Maximal tolerance of waiting for the end of the warm-up phase. If we run out of this time/iteration count (determined by {@link \#maximalWarmUpType}),\n we simply break the test and do not waste more time. {@code -1} means that the check is disabled.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.filter=When set to true, the results are filter to keep just unique values.
org.perfcake.message.sender.ChannelSender=Common ancestor to all sender's sending messages through NIO channels.
org.perfcake.message.sender.AbstractSender.isTraceEnabled=We need to cache the value to be really fast.
org.perfcake.message.sender.RequestResponseJms11Sender.responseConnectionFactory=JMS connection factory property for the response reception.
org.perfcake.reporting.destination.ElasticsearchDestination=Writes the resulting data to Elasticsearch using a simple HTTP REST client.\n The reported data have information about the test progress (time in milliseconds since start, percentage and iteration),\n real time of each result, and the complete results map. Quantities are stored without their unit.\n To properly search through the data, we need to set the mapping (to be able to interpret time as time).\n However, this needs to be done just once for each index and type.
org.perfcake.PerfCakeConst.MESSAGES_DIR_PROPERTY=Name of the system property that stores path where messages are taken from.
org.perfcake.validation.ValidatorUtil.Occurrence.AT_LEAST=At least the specified number of messages exists.
org.perfcake.ide.core.model.properties.SimpleValue=Represents properties value in model.
org.perfcake.message.sender.ChannelSenderSocket.host=Host address.
org.perfcake.message.receiver.HttpReceiver.httpResponse=HTTP response to return to the client. Null means no response will be returned.
org.perfcake.message.generator.MessageGenerator.correlator=Sets a {@link Correlator} to match requests and responses when a separate message channel is used for receiving responses.\n Null means that no correlator and no receiver is used.
org.perfcake.reporting.MeasurementUnit.enqueueTime=Time when the sender request was enqueued. By default we assume this is the creation time.
org.perfcake.message.sender.CoapSender.CoapRequestType.NON_CONFIRMABLE=Non-confirmable request.
org.perfcake.PerfCakeConst.ERR_PARAMETERS=Exit code when there are wrong parameters on the command line.
org.perfcake.message.generator.MessageGenerator.reportManager=Sets the {@link org.perfcake.reporting.ReportManager} to be used for the current performance test execution.
org.perfcake.reporting.reporter.StatsReporter.AVERAGE=A String representation of a metric of an average value.
org.perfcake.util.TimerBenchmark.CYCLES=Benchmark cycles.
org.perfcake.message.sequence.FileLinesSequence.fileUrl=The location of the file to read from.
org.perfcake.ide.core.command.Command=Represent command which may be executed and undone.
org.perfcake.util.StringTemplate.StringMill=Helper to crunch through a string.
org.perfcake.reporting.destination.CsvDestination.delimiter=CSV data elements delimiter.
org.perfcake.message.generator.AbstractMessageGenerator=A common ancestor for most generators. It can generate messages in parallel using {@link MessageSender Message Senders} running\n concurrently in {@link \#threads} number of threads.
org.perfcake.scenario.DslFactory.log=A logger.
org.perfcake.reporting.destination.ElasticsearchDestination.configureMapping=To properly search through the data, we need to set the mapping. However, this needs to be done just once for each index and type.
org.perfcake.reporting.destination.InfluxDbDestination.serverUrl=InfluxDb server including protocol and port number. Supports SSL.
org.perfcake.message.sender.MqttSender.responsePassword=Response server password.
org.perfcake.reporting.destination.ChartDestination.name=Name of the chart for this measurement.
org.perfcake.message.sender.HttpSender.log=The sender's logger.
org.perfcake.reporting.destination.ChartDestination.attributes=Attributes that should be stored in the chart.
org.perfcake.reporting.destination.InfluxDbDestination.tagsArray=Cached array with tags.
org.perfcake.validation.ValidatorUtil.log=Log4j logger.
org.perfcake.message.sender.MqttSender.userName=MQTT server user name.
org.perfcake.PerfCakeConst=Used to store String constants used throughout PerfCake.
org.perfcake.util.properties.MixedPropertyGetter=Provides properties from both {@link java.util.Properties} object and system properties.
org.perfcake.reporting.reporter.WarmUpReporter.minimalWarmUpDuration=Minimal warm-up period duration in milliseconds.
org.perfcake.reporting.destination.ChartDestination=Creates nice charts from the results. The charts are generated to the outputPath path. The charts in the same group can be later\n combined together based on the names of the columns. All previously generated charts in the outputPath path are placed in the final\n report. Use with caution as the big number of results can take too long to load in the browser. Each chart has a quick view file\n where the results can be seen while the test is still running.
org.perfcake.message.sender.RequestResponseJmsSender.receiveAttempts=Maximal number of attempts to read the response.
org.perfcake.message.Message.properties=Properties of the message.
org.perfcake.reporting.reporter.MemoryUsageReporter.log=The reporter's logger.
org.perfcake.reporting.Quantity=A number with an unit.
org.perfcake.reporting.reporter.WarmUpReporter.absoluteThreshold=The absolute difference threshold to determine whether the throughput is not changing much.
org.perfcake.ide.core.model.components.SequenceModel=Model of a sequence inspector.
org.perfcake.ide.core.exception.CommandExecutionException=Represents exception in {@link org.perfcake.ide.core.command.Command} execution.
org.perfcake.ide.core.model.AbstractModel.component=PerfCakeComponet kind, which is represented by this model.
org.perfcake.reporting.destination.ConsoleDestination.ANSI_RESET=ANSI Reset sequence.
org.perfcake.PerfCakeConst.ITERATION_NUMBER_PROPERTY=Name of the message header that stores the number of the current iteration.
org.perfcake.message.generator.SenderTask.validationManager=A reference to the current validator manager. It is used to validate message responses.
org.perfcake.message.generator.SenderTask.messageGenerator=Message generator that created this sender task.
org.perfcake.reporting.destination.Log4jDestination.Level=Log4j level.
org.perfcake.reporting.destination.c3chart.C3ChartHelper.COLUMN_ITERATION=Name of the iteration column.
org.perfcake.reporting.destination.CsvDestination.logTrace=Caching the state of trace logging level to speed up reporting.
org.perfcake.PerfCakeConst.REPLAY_OPT=Name of the cli argument to start raw recording replay.
org.perfcake.message.sender.AbstractJmsSender.MessageType.OBJECT=Object message.
org.perfcake.message.receiver.AbstractReceiver.threads=The number of threads to be started.
org.perfcake.validation.ValidationManager.finished=Indicates whether the validation is finished. Starts with true as there is no validation running at the beginning.
org.perfcake.model.PropertyType=<p>Java class for propertyType complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType name\="propertyType">\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;any processContents\='skip' minOccurs\="0"/>\n       &lt;/sequence>\n       &lt;attribute name\="name" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.generator.AbstractMessageGenerator.runInfo=Represents the information about current run.
org.perfcake.ide.core.inspector.ImplementationField=Implementation field contains information about a field in some inspector implmentation.
org.perfcake.common.TimestampedRecord.value=The value.
org.perfcake.reporting.reporter.accumulator.SumLongAccumulator=Accumulates the sum of values.
org.perfcake.reporting.destination.CsvDestination.MissingStrategy.SKIP=The records with the missing values are skipped/ignored.
org.perfcake.message.sequence.RandomSequence=Sequence of random numbers in the given range &lt;min, max).
org.perfcake.reporting.reporter.accumulator.weighted.WeightedHarmonicMeanAccumulator=Accumulates weighted harmonic mean of inserted values.\n For values x1, x2, x3... and their respective weights w1, w2, w3... the result is\n (w1 + w2 + w3 + ...) / ((w1 / x1) + (w2 / x2) + (w3 / x3) + ...).
org.perfcake.reporting.reporter.accumulator.LastValueAccumulator=Remembers the last reported value.
org.perfcake.common.BoundPeriod=A {@link Period} bound to a specific object. The binding means that the\n BoundPeriod is valid only on the given object and an action should be taken only for this object.
org.perfcake.message.generator.CustomProfileGenerator.lastThreads=Last number of threads when we did the reconfiguration.
org.perfcake.message.sender.CamelSender.context=The Camel context.
org.perfcake.reporting.destination.InfluxDbDestination.userName=InfluxDb user name.
org.perfcake.message.sender.CoapSender.coapResponse=CoAP response.
org.perfcake.reporting.reporter.MemoryUsageReporter.performGcOnMemoryUsage=Allows enabling/disabling of garbage collection performed each time the memory usage of the\n tested system is measured and published.\n Since the garbage collection is CPU intensive operation be careful to enable it and to how often\n the memory usage is measured because it will have a significant impact on the measured system and naturally the\n measured results too. It is disabled (set to <code>false</code>) by default.
org.perfcake.message.sender.RequestResponseJms11Sender.useCorrelationId=Should the correlation ID be used in the JMS communication? Turning it off (false) allows the sender to read any response from the response destination.
org.perfcake.message.sender.ScriptSender.engine=The name of the Java Script Engine.
org.perfcake.reporting.reporter.MemoryUsageReporter.MemoryDataGatheringTask=Gathers memory data internally for memory leak detection analysis.
org.perfcake.validation.ValidatorUtil.Occurrence.AT_MOST=At most the specified number of messages exists.
org.perfcake.message.generator.SenderTask.enqueueTime=The time when the task was enqueued.
org.perfcake.message.generator.AbstractMessageGenerator.validationManager=A reference to the current message validator manager.
org.perfcake.message.generator.AbstractMessageGenerator.messageSenderManager=Message sender manager.
org.perfcake.message.sender.ChannelSenderDatagram.datagramChannel=Sender's Datagram Channel.
org.perfcake.validation.ValidatorUtil.Operator.EXISTS=A part exists.
org.perfcake.message.generator.AbstractMessageGenerator.messageStore=Message store where the messages for senders to be send are taken from.
org.perfcake.reporting.reporter.accumulator.AvgAccumulator.count=Number of reported values.
org.perfcake.ide.core.model.Model=Represents a model object of a PerfCake inspector. Model maintains supported properties and their values.
org.perfcake.message.sender.MessageSender=A contract of message sender. The ultimate goal of a message sender is to send a message (or any other unit of communication work),\n and possibly receive a response. Any implementation should not do anything but the communication. It should be a pure wrapper of\n the message exchange layer.\n\n {@link \#init()} and {@link \#close()} methods should be used to establish and close a permanent connection.\n It is a design consideration of any implementation whether to handle the connection establishment separately (and not measure it),\n or to open and close a connection with every single request (and make it part of the performance measurement).\n Most provided implementations (if not all) handle the connection separately as we are really interested only in measuring the message\n exchange.\n\n {@link \#preSend} and {@link \#postSend} methods are still not part of the performance measurement and can prepare the message for\n actual sending or handle any cleanup.\n\n {@link \#send} method must handle just the message exchange. No logging or complex error handling code should be placed here. Therefore\n we allow any generic exception to be thrown.
org.perfcake.model.Scenario.Reporting.Reporter.Destination.Period=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;attribute name\="type" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.reporting.destination.CsvDestination.appendStrategy=Strategy that is used in case that the output file, that this destination represents\n was used by a different destination or scenario run before.
org.perfcake.model.Scenario.Sequences=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="sequence" maxOccurs\="unbounded" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                 &lt;/sequence>\n                 &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n       &lt;/sequence>\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.reporting.reporter.StatsReporter.MAXIMUM=A String representation of a metric of a maximal value.
org.perfcake.message.sender.GroovySender.groovyExecutable=The groovy executable prefix.
org.perfcake.message.sender.MqttSender.isResponseExpected=True if and only if we should wait for response.
org.perfcake.message.sender.JdbcSender.statement=SQL statement.
org.perfcake.reporting.Measurement.DEFAULT_RESULT=The default result name.
org.perfcake.ide.core.model.components.GeneratorModel=Represents model of a generator.
org.perfcake.message.sender.MqttSender.responseTarget=Where to read the response from.
org.perfcake.reporting.MeasurementUnit.iteration=Iteration for which this unit was created.
org.perfcake.message.generator.RampUpDownGenerator.currentPhase=A current phase of the generator.
org.perfcake.debug.PerfCakeDebug.correlatorClass=Class name of the correlator used.
org.perfcake.ide.core.components.PerfCakeComponent=Represents a PerfCake component. Only the components which are has own model class in pc4ide are\n listed in this enum. Other components are considered too simple, so they are represented just as\n a property of some other component.
org.perfcake.reporting.destination.CsvDestination.outputChannel=File channel for storing the resulting CSV file.
org.perfcake.validation.PrintingValidator=Prints the original message and its response for the validation by human eyes.\n Please note that the validation output is normally stored in a separate log file and\n not printed to all other logging output.\n All messages controlled by this validator are stated valid.
org.perfcake.reporting.destination.CsvDestination.expectedAttributesEmpty=Here we cache the result of expectedAttributes.isEmpty().
org.perfcake.message.generator.CustomProfileGenerator.log=The generator's logger.
org.perfcake.reporting.reporter.MemoryUsageReporter.agentHostname=Hostname where PerfCake agent is listening on.
org.perfcake.model.Scenario.Messages=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="message" maxOccurs\="unbounded">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="header" type\="{urn\:perfcake\:scenario\:7.0}headerType" maxOccurs\="unbounded" minOccurs\="0"/>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                   &lt;element name\="validatorRef" maxOccurs\="unbounded" minOccurs\="0">\n                     &lt;complexType>\n                       &lt;complexContent>\n                         &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                           &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                         &lt;/restriction>\n                       &lt;/complexContent>\n                     &lt;/complexType>\n                   &lt;/element>\n                 &lt;/sequence>\n                 &lt;attribute name\="uri" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="content" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="multiplicity" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n       &lt;/sequence>\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.validation.ScriptValidator.compiledScript=Compiled representation of the script.
org.perfcake.reporting.reporter.ClassifyingReporter.prefix=Prefix of the individual classes.
org.perfcake.RunInfo=Information about the current scenario run.
org.perfcake.reporting.destination.InfluxDbDestination.tags=Comma separated list of tags to be added to results.
org.perfcake.RunInfo.tags=Tags associated with this measurement run.
org.perfcake.validation.ValidationTask=A single unit of work for validator. This class is immutable.
org.perfcake.reporting.reporter.MemoryUsageReporter=Reports memory usage information from a remote JVM,\n where PerfCake agent is deployed. It communicates with the PerfCake agent to\n get the information via TCP sockets.
org.perfcake.scenario.DslFactory.scenario=Parsed scenario object.
org.perfcake.message.sender.Jms11Sender.connection=JMS connection.
org.perfcake.message.sender.ChannelSenderFile=Sends messages through NIO FileChannel.
org.perfcake.reporting.reporter.MemoryUsageReporter.memoryLeakSlopeThreshold=Possible memory leak detection threshold. Possible memory leak is found, when the actual slope of the linear regression\n line computed from the time window data set is greater than the threshold.
org.perfcake.validation.ValidationException=Indicates problems in message validation.
org.perfcake.validation.ValidatorUtil.Operator.EQUALS=Uses {@link java.lang.String\#equals(Object)}.
org.perfcake.reporting.destination.c3chart.C3ChartHelper=Helper class for the ChartDestination. Bridges the destination methods to the corresponding actions of other classes in the package.
org.perfcake.message.generator.ConstantSpeedMessageGenerator.breakDuration=Duration of a break between two submitted tasks in case the speed is lower than 1000 messages per second.
org.perfcake.validation.RegExpValidator=<p>Checks the message payload for the given regular expression.</p>\n\n <p>It is possible to set the {@link java.util.regex.Pattern\#compile(String, int)} compile flags using the particular properties.</p>\n\n <p>All flags but {@link java.util.regex.Pattern\#UNIX_LINES} are supported. That is because\n {@link org.perfcake.util.StringUtil\#trimLines(String)} is used to pre-process the message payload\n that changes all line breakers to <code>\\n</code>.</p>
org.perfcake.PerfCakeConst.WARM_UP_TAG=Result name indicating whether the scenario.
org.perfcake.ide.core.model.PropertyType=Type which represent a value of a property.
org.perfcake.message.sender.AbstractJmsSender.MessageType.BYTEARRAY=Byte array message.
org.perfcake.reporting.reporter.RawReporter.log=The reporter's logger.
org.perfcake.message.generator.RampUpDownGenerator.rampUpStep=A number by which the number of threads is changed in the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#RAMP_UP} phase.
org.perfcake.reporting.reporter.IterationsPerSecondReporter=Reports the average number of iterations that were completed since the test beginning per second.
org.perfcake.validation.ValidatorUtil.MessagePart.BODY=Message body as a whole.
org.perfcake.reporting.reporter.RawReporter=Streams all recorded {@link org.perfcake.reporting.MeasurementUnit MesurementUnits} to a file for later replay.
org.perfcake.message.generator.RampUpDownGenerator.log=The generator's logger.
org.perfcake.message.sender.CoapSender.CoapMethod=CoAP request method.
org.perfcake.message.sender.AbstractSender=The common ancestor for all senders. Facilitates logging and target specification.
org.perfcake.message.receiver.HttpReceiver.httpStatusMessage=HTTP status message to return to the client. Null means it won't be set.
org.perfcake.reporting.reporter.accumulator.Histogram=Histogram to count number of representatives for individual ranges.
org.perfcake.reporting.reporter.accumulator.Histogram.histogram=Actual counts of occurrences for given ranges.
org.perfcake.ide.core.model.PropertyInfo.displayName=Name of the property to be displayed in UI. If this value is null, then name field is used.
org.perfcake.message.MessageTemplate.hasTemplates=True when there are any templates in any part of the message including headers and properties.
org.perfcake.reporting.destination.c3chart.C3Chart.height=Height of the resulting chart SVG graphics in pixels.
org.perfcake.reporting.destination.Destination=A channel to which performance measurement results can be reported.\n Destinations are registered with {@link org.perfcake.reporting.reporter.Reporter Reporters} and are completely controlled by them. The only responsibility of a destination is to open\n a reporting channel, report measurements, and close the reporting channel.\n It is the role of {@link org.perfcake.reporting.Measurement} to provide all the information\n to be reported (including value types, names, units and custom labels).
org.perfcake.scenario.XmlFactory.scenarioConfig=The scenario definition loaded from the file.
org.perfcake.validation.RulesValidator.RULES_ORIGINAL_MESSAGE=Message property key set on the original message for the validator to denote the original message and its response.
org.perfcake.reporting.reporter.ThroughputStatsReporter=Reports statistics of throughput.
org.perfcake.reporting.destination.ConsoleDestination.outro=Precomputed output suffix.
org.perfcake.reporting.destination.InfluxDbDestination.influxDb=InfluxDb client.
org.perfcake.PerfCakeConst.SCENARIO_OPT=Name of the CLI argument to specify scenario name.
org.perfcake.PerfCakeConst.HELP_OPT=Name of the CLI argument to print help.
org.perfcake.PerfCakeConst.PLUGINS_DIR_OPT=Name of the CLI argument to specify path to plugins.
org.perfcake.RunInfo.startTime=Unix time of the measurement start. If the system clock changes during the run, the results based\n on this value are influenced. The iterations however use {@link System\#nanoTime()} so there is no\n worry.
org.perfcake.reporting.destination.InfluxDbDestination.trustStore=SSL trust store location.
org.perfcake.ide.core.exception.PropertyLimitException=Represents exception in limits of property.
org.perfcake.message.generator.ConstantSpeedMessageGenerator=A generator that tries to achieve given speed of messages per second.\n Uses the underlying buffer of {@link SenderTask SenderTasks} in {@link DefaultMessageGenerator}.\n This buffer smoothens the changes in the speed. If you need the generator to change its speed\n more aggressively, configure {@link DefaultMessageGenerator\#setSenderTaskQueueSize(int)}.
org.perfcake.message.sender.HttpSender.dynamicMethod=A string template determining the HTTP method to be used dynamically for each request.\n If not configured (set to null), static configuration in {@link \#method} is used instead.
org.perfcake.message.sender.AbstractSocketSender.in=A reader for response to be received from the socket.
org.perfcake.message.generator.ConstantSpeedMessageGenerator.pointer=Pointer to the buffer - we use it as a circular buffer.
org.perfcake.common.TimeSlidingWindow.length=The length of the window in milliseconds.
org.perfcake.reporting.reporter.MemoryUsageReporter.memoryTrendSlope=Tha latest computed used memory trend slope value.
org.perfcake.validation.ValidatorUtil.Operator.CONTAINS=Uses {@link java.lang.String\#contains(CharSequence)}.
org.perfcake.reporting.reporter.accumulator.MaxLongValueAccumulator=Accumulates the maximum of values.\n Atomic types are not used because both values must be set at the same time. Hence the methods are synchronized.
org.perfcake.reporting.reporter.ClassifyingReporter=Counts of occurrences of individual values in the given message attribute.
org.perfcake.util.Utils.DEFAULT_PLUGINS_DIR=Default name of plugin directory.
org.perfcake.reporting.destination.c3chart.C3Chart.COLUMN_PERCENT=Name of the percentage column.
org.perfcake.reporting.destination.CsvDestination.AppendStrategy.RENAME=The original file is left alone but the output file is renamed according to a number-based pattern.
org.perfcake.validation.ScriptValidator=Validates messages using Java Script Engine and the provided script.\n The script engine must be installed in the extensions directory. The original message is passed\n to the script in the 'originalMessage' property and the response is inserted as 'message', both using\n script bindings. Script return value is evaluated for validation success (true \= passed, false \= failed).
org.perfcake.message.sequence.NumberSequence=Simple sequence of numbers.\n Can go in both directions, can specify boundaries and a step.
org.perfcake.ide.core.model.AbstractProperty.type=Type of this property.
org.perfcake.scenario.ReplayResults.reportLastTimes=We need to remember when we reported for the last time to emulate time based reporting.
org.perfcake.reporting.destination.CsvDestination.lineSuffix=Each line in the output will be suffixed with this string.
org.perfcake.ide.core.model.PropertyContainerImpl=This property container implementation manages one type of property for given model. Property container may be container\n for single-value only, as well as the collection of the properties. The number of properties in container\n must be within a bounds of {@link PropertyInfo\#getMinOccurs()} and {@link PropertyInfo\#getMaxOccurs()}.
org.perfcake.reporting.reporter.StatsReporter.windowSize=A property that specifies a window size with the default value of {@link Integer\#MAX_VALUE}.
org.perfcake.message.sender.WebSocketSender.PerfCakeClientEndpoint=Represents web socket client endpoint.
org.perfcake.message.sender.RequestResponseJms11Sender.responseUsername=JMS username used for the response reception.
org.perfcake.validation.RulesValidatorHelper.log=A logger for this class.
org.perfcake.message.sender.MqttSender.mqttConnection=MQTT connection.
org.perfcake.reporting.reporter.accumulator.TimeSlidingWindowHarmonicMeanAccumulator=Accumulates harmonic mean over a set of recently reported values.
org.perfcake.ide.core.model.PropertyInfo.defaultValue=Default value of the property.
org.perfcake.reporting.destination.ElasticsearchDestination.userName=Elasticsearch user name.
org.perfcake.ide.core.model.PropertyInfo.name=Name of the property.
org.perfcake.message.sender.AbstractJmsSender.messageType=Specifies that the payload should be send as one of {@link JmsSender.MessageType}. Default value\n is set to MessageType.STRING.
org.perfcake.message.sender.ChannelSender.maxResponseSize=Expected maximum response size. Defaults to -1 which means to instantiate the buffer of the same size as the request messages.
org.perfcake.reporting.destination.ElasticsearchDestination.jest=Elasticsearch client.
org.perfcake.util.TimerBenchmark.lastDelta=Last benchmark result.
org.perfcake.message.sender.RequestResponseJms11Sender.responseJndiSecurityCredentials=JNDI password for the response reception.
org.perfcake.PerfCakeConst.THREADS_TAG=Result name of the number of threads.
org.perfcake.message.sender.AbstractJmsSender.jndiUrl=JNDI URL property.
org.perfcake.reporting.reporter.RawReporter.outputStream=Where to write all the objects.
org.perfcake.reporting.destination.ConsoleDestination.foreground=Foreground color code. Can be an empty string to turn this feature off, a single number 0-7,\n or three numbers between 0-255 separated by comma representing r, g, b channels.
org.perfcake.ScenarioExecution.scenario=The scenario created from the specified XML file.
org.perfcake.reporting.reporter.MemoryUsageReporter.memoryDataGatheringTask=Gathers memory data for memory leak detection analysis.
org.perfcake.message.sender.WebSocketSender=Sends a simple messages via websocket protocol to a remote websocket server endpoint.
org.perfcake.message.generator.RampUpDownGenerator.preDuration=A duration period of the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#PRE} phase,\n before the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#RAMP_UP} phase starts.
org.perfcake.reporting.destination.InfluxDbDestination.password=InfluxDb password.
org.perfcake.ide.core.model.AbstractModel.properties=Map of the inspector properties.
org.perfcake.reporting.reporter.StatsReporter.MINIMUM=A String representation of a metric of a minimal value.
org.perfcake.message.sequence.AbstractSequence=This abstract sequence helps with pre-calculating the next value in the row in a background thread\n if the computation of the value is complex. None of the built-in sequences actually do not use this class.\n However, any extension might benefit from it.
org.perfcake.reporting.destination.ChartDestination.dynamicAttributes=Some attributes might end with an asterisk, in such a case, we are not able to create output until the end of the test.
org.perfcake.reporting.reporter.StatsReporter.histogramPrefix=String prefix used in the result map for histogram entries. This prefix is followed by the mathematical representation of the particular range.
org.perfcake.message.sender.RequestResponseJmsSender.correlationId=Correlation ID of this sender instance for it to read only the messages that it has sent.
org.perfcake.reporting.ScalableQuantity.basePower=<p>The base power for the quantity value.</p>\n\n <p>For example in case of decimal numbers, when we want to insert 123 ms, we don't have to re-compute the value to the base unit power\n (and pass it as <code>0.123 s</code>. With the base power we can pass the number value as is <code>123</code> and pass it with\n the base power of <code>-1</code>.</p>
org.perfcake.validation.DictionaryValidator.dictionaryDirectory=The directory where the dictionary is/will be store.
org.perfcake.validation.ValidationManager.ValidationThread=Represents the internal validator thread. The thread validates one message with all registered validators and then\n sleeps for 500ms. This is needed for the validation not to influence measurement. After a call to {@link \#waitForValidation()} the\n sleeps are skipped.
org.perfcake.message.MessageTemplate.template=A template prepared to be rendered.
org.perfcake.validation.RulesValidatorHelper=Helps to build KieContainer based on the Drools rules provided. Used by {@link org.perfcake.validation.RulesValidator}.
org.perfcake.ide.core.exception.ImplementationNotFoundException=This exception indicates, that implementation of PerfCake component cannot be found.
org.perfcake.message.sender.MessageSenderManager=Manages concurrent friendly pool of senders.
org.perfcake.util.properties.PropertyGetter=Provides properties.
org.perfcake.message.sender.CoapSender.CoapRequestType.CONFIRMABLE=Confirmable request.
org.perfcake.debug.PerfCakeDebug.sequenceClasses=Class names of the sequences used.
org.perfcake.model.Scenario.Validation=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="validator" maxOccurs\="unbounded" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                 &lt;/sequence>\n                 &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n       &lt;/sequence>\n       &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n       &lt;attribute name\="fastForward" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="false" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.sequence.RandomSequence.min=Minimal number in the sequence (inclusive).
org.perfcake.PerfCakeConst.ERR_BLOCKED_THREADS=Exit code when there are blocked threads after the scenario was executed.
org.perfcake.reporting.destination.c3chart.C3Chart.type=The chart can be either of line or bar type. Line is the default.
org.perfcake.ide.core.model.AbstractModel.docsService=Documentation service for obtaining properties documentation.
org.perfcake.model.Scenario=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="properties" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                 &lt;/sequence>\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="run">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;attribute name\="type" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="generator">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                 &lt;/sequence>\n                 &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="threads" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="sequences" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="sequence" maxOccurs\="unbounded" minOccurs\="0">\n                     &lt;complexType>\n                       &lt;complexContent>\n                         &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                           &lt;sequence>\n                             &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                           &lt;/sequence>\n                           &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                           &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                         &lt;/restriction>\n                       &lt;/complexContent>\n                     &lt;/complexType>\n                   &lt;/element>\n                 &lt;/sequence>\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="sender">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="target" type\="{http\://www.w3.org/2001/XMLSchema}string" minOccurs\="0"/>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                 &lt;/sequence>\n                 &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="receiver" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="correlator">\n                     &lt;complexType>\n                       &lt;complexContent>\n                         &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                           &lt;sequence>\n                             &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                           &lt;/sequence>\n                           &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                         &lt;/restriction>\n                       &lt;/complexContent>\n                     &lt;/complexType>\n                   &lt;/element>\n                   &lt;element name\="source" type\="{http\://www.w3.org/2001/XMLSchema}string" minOccurs\="0"/>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                 &lt;/sequence>\n                 &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="threads" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="reporting" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;sequence>\n                     &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                   &lt;/sequence>\n                   &lt;element name\="reporter" maxOccurs\="unbounded">\n                     &lt;complexType>\n                       &lt;complexContent>\n                         &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                           &lt;sequence>\n                             &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                             &lt;element name\="destination" maxOccurs\="unbounded" minOccurs\="0">\n                               &lt;complexType>\n                                 &lt;complexContent>\n                                   &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                                     &lt;sequence>\n                                       &lt;element name\="period" maxOccurs\="unbounded" minOccurs\="0">\n                                         &lt;complexType>\n                                           &lt;complexContent>\n                                             &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                                               &lt;attribute name\="type" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                                               &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                                             &lt;/restriction>\n                                           &lt;/complexContent>\n                                         &lt;/complexType>\n                                       &lt;/element>\n                                       &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                                     &lt;/sequence>\n                                     &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                                     &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n                                   &lt;/restriction>\n                                 &lt;/complexContent>\n                               &lt;/complexType>\n                             &lt;/element>\n                           &lt;/sequence>\n                           &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                           &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n                         &lt;/restriction>\n                       &lt;/complexContent>\n                     &lt;/complexType>\n                   &lt;/element>\n                 &lt;/sequence>\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="messages" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="message" maxOccurs\="unbounded">\n                     &lt;complexType>\n                       &lt;complexContent>\n                         &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                           &lt;sequence>\n                             &lt;element name\="header" type\="{urn\:perfcake\:scenario\:7.0}headerType" maxOccurs\="unbounded" minOccurs\="0"/>\n                             &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                             &lt;element name\="validatorRef" maxOccurs\="unbounded" minOccurs\="0">\n                               &lt;complexType>\n                                 &lt;complexContent>\n                                   &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                                     &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                                   &lt;/restriction>\n                                 &lt;/complexContent>\n                               &lt;/complexType>\n                             &lt;/element>\n                           &lt;/sequence>\n                           &lt;attribute name\="uri" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                           &lt;attribute name\="content" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                           &lt;attribute name\="multiplicity" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                         &lt;/restriction>\n                       &lt;/complexContent>\n                     &lt;/complexType>\n                   &lt;/element>\n                 &lt;/sequence>\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="validation" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="validator" maxOccurs\="unbounded" minOccurs\="0">\n                     &lt;complexType>\n                       &lt;complexContent>\n                         &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                           &lt;sequence>\n                             &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                           &lt;/sequence>\n                           &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                           &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                         &lt;/restriction>\n                       &lt;/complexContent>\n                     &lt;/complexType>\n                   &lt;/element>\n                 &lt;/sequence>\n                 &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n                 &lt;attribute name\="fastForward" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="false" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n       &lt;/sequence>\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.reporting.MeasurementUnit.totalTime=Total measured time.
org.perfcake.PerfCakeConst.NICE_TIMESTAMP_PROPERTY=Name of the system property that stores timestamp in the format <code>yyyyMMddHHmmss</code>.
org.perfcake.reporting.destination.c3chart.C3Chart.created=When this chart was created.
org.perfcake.validation.ValidatorUtil.Occurrence=Message occurrence operator.
org.perfcake.message.sender.RequestResponseJms11Sender.receivingTimeout=Timeout for receiving the response in ms for a single attempt.
org.perfcake.common.PeriodType=Units of the {@link Period} type.
org.perfcake.model.Scenario.Receiver.Correlator=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n       &lt;/sequence>\n       &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.sender.AbstractSocketSender.port=The port of the socket.
org.perfcake.message.generator.MessageGenerator=<p>A definition of contract for all message generators.</p>\n\n <p>A message generator controls how many threads are being used to generate the messages, is responsible for creating and submitting\n {@link org.perfcake.message.generator.SenderTask SenderTasks} and controls the other components involved in the performance test execution.</p>\n\n <p>A message generator is the most crucial and complicated component of PerfCake and it is highly recommended to reuse one of existing\n implementations as they already offer mostly wanted features.</p>\n\n <p>The main task of a message generator is to take care of the sending threads, create {@link SenderTask}s as needed and monitor test progress.\n It is important to properly shutdown the message generation for both time and iteration based test length control. In the case of an iteration based\n control, a generator must wait for all the messages to be processed. In the case of a time based control, the test stops immediately after the time\n has elapsed.</p>\n\n <p>Each {@link SenderTask} takes a {@link MessageGenerator} instance to be able to notify the parent generator of any errors that might\n have occurred.</p>\n\n <p>When there is a separate message channel used to receive messages, a {@link Correlator} is set to match requests and responses. The {@link Correlator} is also\n passed to the {@link SenderTask} so it can register sent messages with it.</p>
org.perfcake.reporting.destination.CsvDestination.linePrefix=Each line in the output will be prefixed with this string.
org.perfcake.PerfCakeConst.TIMESTAMP_PROPERTY=Name of the system property that stores Unix timestamp.
org.perfcake.reporting.reporter.accumulator.SumAccumulator=Accumulates the sum of values.
org.perfcake.model.Scenario.Properties=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n       &lt;/sequence>\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.sender.RequestResponseJmsSender.responseConsumer=JMS session to the response destination.
org.perfcake.reporting.destination.ElasticsearchDestination.startTime=Time when the test was started.
org.perfcake.message.sender.SslSocketSender.keyStorePassword=SSL key store password.
org.perfcake.reporting.reporter.accumulator.TimeSlidingWindowMinAccumulator=Accumulates minimal value over a set of recently reported values.
org.perfcake.message.sender.AbstractJmsSender=Common ancestor of {@link JmsSender} and {@link Jms11Sender}.
org.perfcake.debug.PerfCakeDebug.sequenceSnapshots=Number of sequence snapshots taken.
org.perfcake.message.sequence.SequenceManager=Keeps a registry of existing sequences.
org.perfcake.message.generator.MessageGenerator.threads=Sets the number of threads used to generate the messages. This can be changed during a running test.
org.perfcake.scenario.ReplayResults.reportManager=Link to {@link ReportManager} used to report results.
org.perfcake.ide.core.components.ComponentLoader=Component loader enables to get component clazz from classpath.
org.perfcake.message.sender.RequestResponseJmsSender.responseJndiSecurityCredentials=JNDI password for the response reception.
org.perfcake.ide.core.model.Property.model=Sets a model which owns this property.
org.perfcake.message.sender.RequestResponseJms11Sender.responseConnection=JMS connection to the response destination.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.avg=Accumulator to store average response rate for histogram auto-correction.
org.perfcake.message.generator.RampUpDownGenerator.rampDownStep=A number by which the number of threads is changed in the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#RAMP_DOWN} phase
org.perfcake.reporting.destination.ElasticsearchDestination.trustStore=SSL trust store location.
org.perfcake.reporting.reporter.StatsReporter.responseSizeEnabled=True when response size reporting is enabled.
org.perfcake.reporting.destination.c3chart.C3ChartDataFile.resourceFiles=A list of file resources to be copied in the resulting report.
org.perfcake.scenario.Scenario.messageStore=Store of the messages.
org.perfcake.PerfCakeConst.ATTRIBUTES_TAG=Result name of message attributes stored in the measurement unit.
org.perfcake.scenario.Scenario.validationManager=Validation manager.
org.perfcake.reporting.reporter.GeolocationReporter.log=Our logger.
org.perfcake.scenario.Scenario.receiver=Receives messages from a different message channel. Null means that it is unused.
org.perfcake.ide.core.model.PropertyInfo.minOccurs=Minimum number of required occurrences of this property.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.precision=Precision of the resulting histogram (number of significant digits) in range 0 - 5.\n This determines the memory used by the reporter.
org.perfcake.util.SslSocketFactoryFactory=Factory to create pre-configured SSL socket factories.\n Searches for the file in the directory specified in the property called like the value of {@link PerfCakeConst\#KEYSTORES_DIR_PROPERTY}, then in\n <code>keystores</code> directory and then in current working directory or the full path specified in the location parameters.
org.perfcake.reporting.destination.c3chart.C3Chart.group=The chart's group name. Charts from multiple measurements that have the same group name are later searched for matching attributes.
org.perfcake.reporting.reporter.MemoryUsageReporter.responseReader=Reader to read response from PerfCake agent.
org.perfcake.message.receiver.AbstractReceiver.source=The source from where to receive the messages.
org.perfcake.reporting.destination.CsvDestination.AppendStrategy.APPEND=The measurements are appended to the original file.
org.perfcake.reporting.reporter.MemoryUsageReporter.memoryLeakDetectionEnabled=Switch to enabling (disabling) the possible memory leak detection.
org.perfcake.reporting.destination.InfluxDbDestination.sslFactory=Initialized SSL factory.
org.perfcake.model.Scenario.Messages.Message=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="header" type\="{urn\:perfcake\:scenario\:7.0}headerType" maxOccurs\="unbounded" minOccurs\="0"/>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n         &lt;element name\="validatorRef" maxOccurs\="unbounded" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n       &lt;/sequence>\n       &lt;attribute name\="uri" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="content" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="multiplicity" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.reporting.reporter.accumulator.weighted.WeightedValue=Weighted value is a wrapper for a numeric value with some weight.\n This is used for statistics. An instance is immutable.
org.perfcake.message.sender.MqttSender.topicName=Name of topic where to send messages.
org.perfcake.message.generator.RampUpDownGenerator.mainDuration=A duration for which the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#MAIN} phase lasts.
org.perfcake.reporting.destination.CsvDestination.skipHeader=Skip writing header to the file.
org.perfcake.message.receiver.AbstractAutoSpawnReceiver=Simplifies writing of the receivers. An implementation just needs to override its {@link Thread\#run()} method.\n The needed number of threads is started and terminated automatically. It is just necessary to pass the received\n messages to the correlator using {@link Correlator\#registerResponse(Serializable, io.vertx.core.MultiMap)}.
org.perfcake.message.receiver.Receiver.source=Sets the source from where to receive the messages.
org.perfcake.message.sender.MessageSenderManager.senderPoolSize=Number of available senders ready to send the message. Internally configured to reflect number of threads configured in a generator.
org.perfcake.common.TimeSlidingWindow=<p>A structure to keep record of elements for a certain period of time. It supports concurrent access and\n has amortized time complexity to add and remove element of O(1) (each removal is prepaid while the element is added).</p>\n\n <p>The window keeps time order of the elements and although it offers the possibility of providing artificial time, it still\n needs that the objects are added in a correct time order (older objects first).</p>\n\n <p>The time window is closed on both ends. For example, a sliding window all length 500 at the current time 600 will have both objects\n for time 100 and 600.</p>
org.perfcake.message.generator.CustomProfileGenerator.profileClass=The class name of the profile.
org.perfcake.reporting.destination.c3chart.C3Chart.yAxis=The legend of the Y axis of this chart.
org.perfcake.message.sender.Jms11Sender=Sends messages via JMS.
org.perfcake.common.PeriodType.PERCENTAGE=Period base on percents.
org.perfcake.PerfCakeConst.SCENARIO_PROPERTY=Name of the system property that stores name of scenario that is executed.
org.perfcake.message.generator.SenderTask.senderManager=Reference to a message sender manager that is providing the message senders.
org.perfcake.message.sender.RequestResponseJms11Sender.responseReceiver=JMS consumer for the response destination.
org.perfcake.reporting.reporter.StatsReporter.WindowType.ITERATION=A window of the number of latest iterations.
org.perfcake.message.sender.AbstractJmsSender.persistent=Indicates whether the JMS message is persisted during transport or not.
org.perfcake.util.properties.SystemPropertyGetter=Provides system properties.
org.perfcake.message.sender.RequestResponseJmsSender.responseJndiUrl=JNDI URL property for the response reception.
org.perfcake.message.sender.AbstractSocketSender=The common ancestor for all senders that are able to send messages through a socket.
org.perfcake.reporting.reporter.accumulator.MaxAccumulator.max=Maximum of the reported values.
org.perfcake.model.Scenario.Messages.Message.ValidatorRef=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.generator.CustomProfileGenerator.profileSource=Where to read the profile data from. Can be unused by some profiles.
org.perfcake.message.sender.ScriptSender.compiledScript=Compiled representation of the script.
org.perfcake.message.generator.CustomProfileGenerator.lastSpeed=Last speed when we did the reconfiguration.
org.perfcake.message.generator.DefaultMessageGenerator=Generates maximal load using a given number of threads.
org.perfcake.ide.core.inspector.PropertyUtilsInspector=PropertyUtilsInspector uses Commons Beanutils to parse implementation fields from the class.
org.perfcake.message.sender.AbstractSocketSender.out=A writer for message to be written into the socket.
org.perfcake.message.receiver.Receiver=Represents a receiver for receiving messages from a separate message channel.\n All received messages are passed to the correlator which notifies the correct {@link org.perfcake.message.generator.SenderTask}.\n A receiver must start the defined (using the {@link Receiver\#setThreads(int)} method) threads to receive messages.\n These threads are later stopped with {@link Thread\#interrupt()}. It is up to the receiver threads to react accordingly.\n Receivers must be executed as daemon threads and can be terminated at the end of the test execution if they do not react to the interruption.
org.perfcake.reporting.ReportManager=Controls the reporting facilities.
org.perfcake.ide.core.exception.MapperException=Represent exception in mapping process.
org.perfcake.message.sender.SslSocketSender=Sends messages via a SSL socket.
org.perfcake.util.StringTemplate.parts=Compiled data of the template. Static parts of the template.
org.perfcake.PerfCakeConst.SKIP_TIMER_BENCHMARK_OPT=Name of the CLI argument to skip timer benchmark.
org.perfcake.validation.DictionaryValidator.dictionaryIndex=The file name of the dictionary index.
org.perfcake.message.sender.AbstractSocketSender.log=The sender's logger.
org.perfcake.reporting.MeasurementUnit.startTime=Time when last measurement started. A unit may accumulate more measurements together.
org.perfcake.reporting.reporter.WarmUpReporter.maximalWarmUpType=The unit in which we measure the maximal warm-up count. Can be iteration, time, or percentage.
org.perfcake.message.sender.AbstractJmsSender.ctx=JMS initial context.
org.perfcake.message.receiver.Receiver.threads=Sets the number of threads that will be receiving responses.
org.perfcake.ide.core.model.components.ValidatorModel=Represents model of Validator PerfCake inspector.
org.perfcake.reporting.destination.ConsoleDestination=Appends a {@link org.perfcake.reporting.Measurement} to standard output.
org.perfcake.message.sender.MqttSender.password=MQTT server password.
org.perfcake.ide.core.model.AbstractProperty=Contains information about property of a model.
org.perfcake.reporting.reporter.AbstractReporter.periods=Set of periods bound to destinations. This is used to register destinations and requested reporting periods.
org.perfcake.reporting.reporter.accumulator.SlidingWindowMaxAccumulator=Accumulates a maximal value over a set of the number of recently reported values.
org.perfcake.reporting.Measurement.iteration=The last iteration for what the measurement is valid.
org.perfcake.ide.core.exception.ModelConversionException=Represent an Exception in converting model.
org.perfcake.PerfCakeConst.FAILURES_TAG=Result name counting the number of failed sender tasks.
org.perfcake.reporting.ScalableQuantity=A number with a scalable unit.
org.perfcake.util.StringTemplate.hasPlaceholders=True when there were any placeholders in the template.
org.perfcake.reporting.destination.c3chart.C3ChartHelper.chartDataFile=Main chart data file used to store results of the parent ChartDestination.
org.perfcake.message.sender.JmsSender.destination=JMS destination where the messages are send.
org.perfcake.PerfCakeConst.FAIL_FAST_PROPERTY=Name of the system property to cause immediate scenario termination when there is an exception thrown by a sender.
org.perfcake.reporting.reporter.WarmUpReporter.relativeThreshold=The relative difference threshold to determine whether the throughput is not changing much.
org.perfcake.reporting.reporter.MemoryUsageReporter.memoryDumpOnLeak=The property to make a memory dump, when possible memory leak is detected. The {@link org.perfcake.reporting.reporter.MemoryUsageReporter}\n will send a command to PerfCake agent that will create a heap dump.
org.perfcake.PerfCakeConst.ERR_NO_SCENARIO=Exit code when there is no scenario specified.
org.perfcake.util.StringTemplate.StringMill.i=Current position in the string.
org.perfcake.reporting.reporter.AbstractReporter.iterationCounter=The count of reported iterations.
org.perfcake.reporting.reporter.AbstractReporter.accumulatedResults=Accumulators to accumulate results from multiple {@link org.perfcake.reporting.MeasurementUnit Measurement Units}.
org.perfcake.message.sender.HttpSender.url=The URL where the HTTP request is sent.
org.perfcake.ide.core.inspector.PropertyInspector=Property inspector enables to find properties specific to implementation class of a PerfCake inspector.
org.perfcake.reporting.destination.util.DataBuffer=Buffer for storing measurements. It notices which attributes passed through and creates an ultimate list of them.
org.perfcake.message.correlator.Correlator=Correlates requests with their responses and notifies {@link SenderTask} of receiving the appropriate response to the\n original request. This is done based on a correlation id that is extracted from both request and response.\n Upon a successful match, {@link SenderTask\#registerResponse(Serializable)} is called.\n For performance reasons, all interface methods should be implemented thread safe without locking and or synchronization.\n All implementations should make sure that they do not keep eating up the memory and clean their data structures regularly.
org.perfcake.message.generator.SenderTask.log=Sender task's logger.
org.perfcake.message.sequence.FileLinesSequence.iterator=Current position in the array of {@link \#lines}. We use this primitive approach to be easily thread-safe.\n It is a dirty trick but does the job. Using AtomicInteger would lead to another synchronization.
org.perfcake.util.StringTemplate.StringMill.str=The string being crunched.
org.perfcake.debug.PerfCakeDebug.parentReporters=Internal reference of parent reportes of individual destinations for later reporting.
org.perfcake.reporting.destination.c3chart.C3ChartData.target=Target path where the charts report is stored. The individual data files are located in ${target}/data/${baseName}.js.
org.perfcake.message.ReceivedMessage.response=Received response payload.
org.perfcake.message.sequence.FilesContentSequence.cacheContent=When true, the content of individual files is cached in memory.\n This can consume significant amount of memory so use with caution.
org.perfcake.reporting.reporter.MemoryUsageReporter.usedMemoryTimeWindow=Used memory time window (number of latest records) for possible memory leak detection.
org.perfcake.reporting.destination.InfluxDbDestination.trustStorePassword=SSL trust store password.
org.perfcake.scenario.XmlFactory.log=A logger.
org.perfcake.reporting.destination.c3chart.C3ChartHtmlTemplates=Renders HTML and JavaScript templates to the final chart report.
org.perfcake.message.generator.SenderTask.messageStore=Reference to a message store where the messages are taken from.
org.perfcake.reporting.destination.c3chart.C3ChartReport.CombinedJsFileFilter=A file filter for chart files created as a combination of existing charts.
org.perfcake.ide.core.model.PropertyContainerImpl.propertyInfo=Type of contained properties.
org.perfcake.debug.PerfCakeDebug.validatorClasses=Class names of the validators used.
org.perfcake.message.generator.RampUpDownGenerator.preThreadCount=An initial number of threads.
org.perfcake.PerfCakeConst.DEBUG_PROPERTY=Name of the system property that stores the debug agent activation state.
org.perfcake.reporting.destination.CsvDestination.AppendStrategy=Determines the strategy for a case that the output file exists. {@link AppendStrategy\#OVERWRITE} means that the file\n is overwritten, {@link AppendStrategy\#RENAME} means that the current output file is renamed by adding a number-based\n suffix and {@link AppendStrategy\#APPEND} is for appending new results to the original file.
org.perfcake.reporting.reporter.WarmUpReporter.CHECKING_PERIOD=The period in milliseconds in which the checking if the tested system is warmed up.
org.perfcake.message.sender.CommandSender.commandPrefix=The prefix for the command.
org.perfcake.message.sender.RequestResponseJms11Sender.responseJndiContextFactory=JNDI context factory property for the response reception.
org.perfcake.message.sender.HttpSender.expectedResponseCodes=The property for expected response codes.
org.perfcake.message.sequence.RandomSequence.max=Maximal number in the sequence (exclusive).
org.perfcake.reporting.destination.CsvDestination.resultNames=The list containing names of results from measurement.
org.perfcake.reporting.destination.ConsoleDestination.log=Logger.
org.perfcake.message.generator.SenderTask.correlatedResponse=A response matched by a correlator.
org.perfcake.validation.ValidationManager.validators=A map of validators\: validator id \=> validator instance.
org.perfcake.reporting.reporter.GeolocationReporter.serviceUrl=URL of the service used to obtain the location.
org.perfcake.message.generator.profile.ProfileRequest=Carries the information about current requested messages generation profile.
org.perfcake.validation.ValidationManager.log=A logger.
org.perfcake.PerfCakeConst.PROPERTIES_FILE_OPT=Name of the CLI argument to specify path to the property file.
org.perfcake.reporting.Measurement=Measurement is a product of {@link org.perfcake.reporting.reporter.Reporter}.\n It is typically a combination of multiple {@link MeasurementUnit Measuremen Units}.\n The way they are combined is the matter of a particular {@link org.perfcake.reporting.reporter.Reporter}\n implementation.
org.perfcake.validation.PrintingValidator.log=Logger used to print out messages.
org.perfcake.debug.PerfCakeDebug.sentMessages=Number of sent messages.
org.perfcake.reporting.destination.c3chart.C3ChartData.data=The individual lines of data.
org.perfcake.reporting.ReportManager.isTraceEnabled=We need to be really fast.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.expectedValue=The value of normal/typical/expected response time in ms to correct the histogram\n while the {@link Correction\#USER} correction mode is turned on.
org.perfcake.message.sender.RequestResponseJms11Sender.receiveAttempts=Maximal number of attempts to read the response.
org.perfcake.reporting.destination.ElasticsearchDestination.elasticRequests=Requests with reported data.
org.perfcake.reporting.destination.c3chart.C3ChartData=Data of a C3 chart stored in the .js file as a script building an array.\n Does not work with the data header and does not know anything about the actual data.\n It is the role of {@link C3Chart} to carry all the meta-data.
org.perfcake.message.sender.MqttSender.qos=Required quality of service.
org.perfcake.validation.ValidatorUtil.Occurrence.NONE=None such message exists.
org.perfcake.message.sender.JdbcSender.connection=JDBC connection.
org.perfcake.reporting.MeasurementUnit=A result of the smallest measurement unit - an iteration.\n One should obtain a new instance of a MeasurementUnit using {@link org.perfcake.reporting.ReportManager\#newMeasurementUnit()}.
org.perfcake.scenario.DslFactory=Loads the scenario from a DSL script.\n This class serves as a bridge between Java and Groovy DSL scenario implementation.\n The DSL language is pure Groovy based on a set of classes specially designed to allow the needed syntax.
org.perfcake.PerfCakeConst.TAGS_TAG=Result name of the user tags.
org.perfcake.PerfCakeConst.VERSION=PerfCake version.
org.perfcake.reporting.reporter.AbstractReporter.lastPercentage=Remembers the last observed percentage state of the measurement run. This is used to report change to this value only once.
org.perfcake.validation.ValidatorUtil.MessagePart=Message part that is validated.
org.perfcake.common.Period.period=Length of the period.
org.perfcake.PerfCakeConst.XSD_SCHEMA_VERSION=PerfCake scenario XML Schema version that is part of namespace <code>urn\:perfcake\:scenario\:&lt;version&gt;</code>.
org.perfcake.message.generator.RampUpDownGenerator=Generates maximal load using a variable number of threads.\n <p>The generating starts with the number of threads set to the value of the {@link \#preThreadCount} property.\n It continues to execute for the duration set by the {@link \#preDuration} property.\n The period is called the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#PRE PRE} phase.\n When {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#PRE PRE} phase ends,\n the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#RAMP_UP RAMP UP} phase starts.</p>\n\n <p>In the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#RAMP_UP RAMP UP} phase\n the number of threads is changed by the value of the {@link \#rampUpStep} property\n each period set by the {@link \#rampUpStepPeriod} until it reaches the number of threads\n set by the value of the {@link \#mainThreadCount} property.</p>\n\n <p>In that moment {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#MAIN MAIN} phase starts\n and the execution continues for the duration set by the {@link \#mainDuration} property,\n after which the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#RAMP_DOWN RAMP DOWN} phase starts.</p>\n\n <p>In the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#RAMP_DOWN RAMP DOWN} phase\n the number of threads is again changed but this time in the opposite direction than\n in the {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#RAMP_UP RAMP UP} phase.\n It changes by the value of the {@link \#rampDownStep} property each period specified\n by the {@link \#rampDownStepPeriod} property until the final number of threads is reached.\n By that moment the final phase called {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#POST POST} starts.</p>\n\n <p>The {@link org.perfcake.message.generator.RampUpDownGenerator.Phase\#POST POST} phase ends by the end of the scenario execution.</p>\n\n <p>The outer borders of the number of threads and the duration is set by the maximum number of threads\n specified by the <code>threads</code> attribute of the generator and by the maximum duration set by the <code>run</code> element.</p>
org.perfcake.ide.core.model.properties.KeyValueImpl=Represents a key-value object.
org.perfcake.reporting.MeasurementUnit.stopTime=Time when last measurement ended.
org.perfcake.reporting.destination.ElasticsearchDestination.sslContext=Initialized SSL context.
org.perfcake.model.Scenario.Run=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;attribute name\="type" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.reporting.destination.c3chart.C3Chart.xAxisType=The type of the X axis. It can display the overall progress of the test in Percents, Time, or Iteration numbers.
org.perfcake.message.sequence.RandomUuidSequence=Sequence of random UUIDs.
org.perfcake.message.sender.RequestResponseJmsSender.log=Logger.
org.perfcake.reporting.destination.c3chart.C3ChartReport.fileCounter=File counter for the stored combined chart.
org.perfcake.message.sender.CoapSender=CoAP sender.
org.perfcake.PerfCakeConst.SCENARIOS_DIR_OPT=Name of the CLI argument to specify path to scenarios.
org.perfcake.reporting.reporter.accumulator.AbstractTimeSlidingWindowAccumulator.window=Sliding time window to record values of the given time period.
org.perfcake.message.sender.DummySender.delay=The delay duration to simulate a asynchronous waiting.
org.perfcake.reporting.destination.c3chart.C3ChartHelper.COLUMN_TIME=Name of the time column.
org.perfcake.debug.PerfCakeDebug.log=The logger.
org.perfcake.scenario.Scenario.correlator=Correlates received messages with the sent ones. Null means that it is unused.
org.perfcake.message.sender.CommandSender.environmentVariables=The array of environment variables passed to the command.
org.perfcake.ide.core.model.components.DestinationModel=Represent model of a Destination PerfCake inspector.
org.perfcake.debug.PerfCakeDebug=JMX based debug agent providing information about the running performance test.
org.perfcake.message.sender.AbstractSender.keepConnection=Keeps the same connection to the target between individual invocations.\n This can achieve higher throughput, however, target cannot be changed for individual\n invocations and it does not make sense to use placeholders in target.
org.perfcake.debug.PerfCakeDebug.resultsReported=Number of measurement units passed to individual reporter for accumulation.\n The key is the reporter class name.
org.perfcake.model.Scenario.Reporting.Reporter=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n         &lt;element name\="destination" maxOccurs\="unbounded" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="period" maxOccurs\="unbounded" minOccurs\="0">\n                     &lt;complexType>\n                       &lt;complexContent>\n                         &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                           &lt;attribute name\="type" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                           &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                         &lt;/restriction>\n                       &lt;/complexContent>\n                     &lt;/complexType>\n                   &lt;/element>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                 &lt;/sequence>\n                 &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n       &lt;/sequence>\n       &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.generator.profile.ProfileRequest.threads=The number of threads requested to execute sender tasks.
org.perfcake.ide.core.model.AbstractProperty.pcs=Manages listeners and enables to fire events.
org.perfcake.reporting.reporter.accumulator.TimeSlidingWindowSumLongAccumulator=Accumulates sum over a set of recently reported values.
org.perfcake.debug.PerfCakeDebug.validationResults=Number of validated messages. The key is validator id.
org.perfcake.message.sender.HttpSender.payloadLength=The request payload length.
org.perfcake.message.sender.RequestResponseJmsSender.responseTarget=Where to read the responses from.
org.perfcake.message.MessageTemplate.multiplicity=How many times the message should be sent in one iteration.
org.perfcake.message.sender.DummySender=Serves as a dummy sender to start developing a new sender. It does not actually send any message.\n It can simulate a synchronous waiting for a reply by setting the {@link \#delay} property in milliseconds (with default values 0).
org.perfcake.reporting.reporter.accumulator.SumLongAccumulator.sum=Sum of the reported values.
org.perfcake.model.Scenario.Sender=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="target" type\="{http\://www.w3.org/2001/XMLSchema}string" minOccurs\="0"/>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n       &lt;/sequence>\n       &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.ReceivedMessage.sentMessageTemplate=Original message template.
org.perfcake.message.sender.AbstractJmsSender.jndiContextFactory=JNDI context factory property.
org.perfcake.message.sender.ChannelSender.awaitResponse=Determines whether we should wait for the response from the channel.
org.perfcake.ide.core.model.components.CorrelatorModel=Represents model of a Correlator.
org.perfcake.reporting.reporter.accumulator.SlidingWindowAvgAccumulator=Accumulates average over a set of the number of recently reported values.
org.perfcake.reporting.MeasurementUnit.log=Logger.
org.perfcake.message.sender.ScriptSender.log=Logger.
org.perfcake.reporting.destination.CsvDestination.wasWarmUp=True when the warmUp attribute was required in expectedFields.
org.perfcake.reporting.reporter.AbstractReporter.log=The reporter's logger.
org.perfcake.message.sender.RequestResponseJms11Sender.log=Logger.
org.perfcake.reporting.destination.ElasticsearchDestination.password=Elasticsearch password.
org.perfcake.validation.DictionaryValidator.record=True when the the record mode active.
org.perfcake.reporting.reporter.accumulator.Accumulator=Accumulator is a tool for reporters to accumulate multiple values from measurement units into a single mesurement.\n Accumulator must be thread safe as it might be called from multiple threads at the same time.
org.perfcake.reporting.destination.c3chart.C3ChartDataFile.firstResultsLine=This is set to false after a first result line is obtained from the getResultLine() method.\n In the method, this is used to display a complete warning message for the user to be able to fix\n the scenario. But we do not want the warning to show every time as it would slow down the performance.
org.perfcake.message.sender.RequestResponseJmsSender.responseCtx=JMS initial context for response reception.
org.perfcake.reporting.reporter.StatsReporter=<p>Reports the minimal, maximal and average value from the beginning\n of the measuring to the moment when the results are published including. The actual value about what\n the statistics are gathered is computed as a result of the {@link \#computeResult(MeasurementUnit)} method.</p>\n\n <p>The default value of the reporter is a current value at the moment of publishing.</p>
org.perfcake.ide.core.exception.UnsupportedPropertyException=This exception indicates that operation was invoked with unsupported property.
org.perfcake.message.sender.WebSocketSender.PayloadType=Payload type.
org.perfcake.message.sender.HttpSender.payload=The request payload.
org.perfcake.util.ObjectFactory.log=Logger of this class.
org.perfcake.message.sequence.NumberSequence.step=Step in the sequence.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.Correction=Correction mode can be switched off (no correction), automatic or user specified.
org.perfcake.reporting.destination.InfluxDbDestination.keyStorePassword=SSL key store password.
org.perfcake.reporting.reporter.MemoryUsageReporter.host=IP address of the PerfCake agent.
org.perfcake.message.sender.MessageSender.target=Sets the target where to send the messages.
org.perfcake.PerfCakeConst.PROPERTIES_FILE_PROPERTY=Name of the system property that stores path to the property file with system properties.
org.perfcake.message.sender.MessageSenderManager.messageSenderProperties=Properties of message sender that will be passed to sender instances.
org.perfcake.reporting.reporter.GeolocationReporter=Reports geolocation of PerfCake by its external IP address. Uses a 3rd party public REST API.\n Obtains the location just once and keeps it reporting. It does not make sense to configure this reporter to report more than once.\n As a bonus, it also reports iterations per second in the same way as {@link IterationsPerSecondReporter} does.
org.perfcake.message.sender.JmsSender=Sends messages via JMS.
org.perfcake.message.sender.CoapSender.CoapRequestType=CoAP request type.
org.perfcake.PerfCakeConst.LOGGING_LEVEL_PROPERTY=Name of the system property that stores PerfCake logging level.
org.perfcake.reporting.destination.Log4jDestination=Appends the measurements to Log4j to category org.perfcake.reporting.destination.Log4jDestination.\n Make appropriate configurations to customize its output. You can configure a separate appender only for this category for instance.\n Logging level can be set via the level attribute.
org.perfcake.message.sender.HttpSender.requestConnection=The HTTP request connection.
org.perfcake.scenario.ReplayResults.ReplayRunInfo.time=Current artificial time.
org.perfcake.ide.core.model.properties.KeyValue=Represents a store of key value pair. Additionally, key value pair may also\n contain any String representation of another attribute, because some PerfCake key-value\n tags such as property may have any embedded data.
org.perfcake.message.sender.AbstractSocketSender.host=The host of the socket.
org.perfcake.PerfCakeConst.SCENARIOS_DIR_PROPERTY=Name or the system property that stores path where scenarios are taken from.
org.perfcake.message.sender.MessageSenderManager.senderClass=Name of the class implementing the sender used in the scenario execution.
org.perfcake.ide.core.command.SimplePropertyCommand=Represents commands which sets value of a simple property.
org.perfcake.message.sender.CommandSender.command=The actual command that is executed.
org.perfcake.message.sender.RequestResponseJms11Sender=Sends messages and receives responses over JMS.
org.perfcake.RunInfo.scenarioName=The name of the scenario. This can be used in reporting and is filled with scenario file name\n by {@link org.perfcake.scenario.ScenarioLoader}.
org.perfcake.reporting.reporter.MemoryUsageReporter.usedMemoryTimeWindowSize=Size of the memory time window (number of latest records) for possible memory leak detection.
org.perfcake.docs.doclet.JavadocComponentParser=JavadocComponentParser scans sources of standard PerfCake components and parses their documentation from\n javadoc sources.
org.perfcake.message.sender.Jms11Sender.destination=JMS destination where the messages are send.
org.perfcake.reporting.destination.c3chart.C3ChartDataFile.outputChannel=A file channel for storing results.
org.perfcake.message.sender.SslSocketSender.log=My precious logger.
org.perfcake.reporting.reporter.AbstractReporter.runInfo=RunInfo associated with current measurement.
org.perfcake.reporting.reporter.MemoryUsageReporter.agentPort=Port number where PerfCake agent is listening on.
org.perfcake.debug.PerfCakeDebug.INSTANCE=Singleton instance of the debug agent.
org.perfcake.reporting.ReportManager.periodicThread=Thread to assure time based periodical reporting.
org.perfcake.message.sender.ChannelSenderSocket=Sends messages through NIO SocketChannel.
org.perfcake.validation.ScriptValidator.script=The script to be used for validation (code of the script). Has priority over scriptFile.
org.perfcake.scenario.Scenario.generator=Message generator.
org.perfcake.reporting.Measurement.percentage=The last progress percentage for what the measurement is valid.
org.perfcake.message.sender.RequestResponseJms11Sender.responsePassword=JMS password used for the response reception.
org.perfcake.message.generator.SenderTask.waitForResponse=Synchronize on waiting for a message from a correlator.\n Must be set before correlator is used.
org.perfcake.RunInfo.endTime=Unix time of the measurement end. If the system clock changes during the run, the results based\n on this value are influenced. The iterations however use {@link System\#nanoTime()} so there is no\n worry.
org.perfcake.reporting.destination.ChartDestination.log=A logger for this class.
org.perfcake.message.sequence.NumberSequence.end=Last number of the sequence.
org.perfcake.util.properties.DefaultPropertyGetter=Provides properties from a {@link java.util.Properties} instance.
org.perfcake.reporting.reporter.accumulator.MinAccumulator=Accumulates the minimum of double values.\n Atomic types are not used because both values must be set at the same time. Hence the methods are synchronized.
org.perfcake.reporting.destination.Log4jDestination.level=Level at which we should log the measurements.
StringUtils=Utility class for manipulating with strings.
org.perfcake.reporting.reporter.ResponseTimeStatsReporter=Reports statistics of response time.
org.perfcake.message.generator.RampUpDownGenerator.rampUpStepPeriod=A period after which the number of threads is changed by {@link org.perfcake.message.generator.RampUpDownGenerator\#rampUpStep} value.
org.perfcake.reporting.destination.ChartDestination.type=The chart can be either of line or bar type. Line is the default.
org.perfcake.model.Scenario.Reporting=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;sequence>\n           &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n         &lt;/sequence>\n         &lt;element name\="reporter" maxOccurs\="unbounded">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;sequence>\n                   &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                   &lt;element name\="destination" maxOccurs\="unbounded" minOccurs\="0">\n                     &lt;complexType>\n                       &lt;complexContent>\n                         &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                           &lt;sequence>\n                             &lt;element name\="period" maxOccurs\="unbounded" minOccurs\="0">\n                               &lt;complexType>\n                                 &lt;complexContent>\n                                   &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                                     &lt;attribute name\="type" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                                     &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                                   &lt;/restriction>\n                                 &lt;/complexContent>\n                               &lt;/complexType>\n                             &lt;/element>\n                             &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n                           &lt;/sequence>\n                           &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                           &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n                         &lt;/restriction>\n                       &lt;/complexContent>\n                     &lt;/complexType>\n                   &lt;/element>\n                 &lt;/sequence>\n                 &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n       &lt;/sequence>\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.common.TimeSlidingWindow.window=The internal data structure maintaining the records of objects together with the time when they were added.\n The data are kept ordered because we assume mainly linear behavior.
org.perfcake.PerfCakeConst.MESSAGES_DIR_OPT=Name of the CLI argument to specify path to messages.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.log=The reporter's logger.
org.perfcake.util.ObjectFactory=Creates POJOs according to the given class name and a map of attributes and their values.
org.perfcake.message.receiver.HttpReceiver.httpStatusCode=HTTP status code to return to the client. Defaults to 200.
org.perfcake.reporting.reporter.accumulator.weighted.WeightedMeanAccumulator=Accumulates weighted mean.\n For values x1, x2, x3... and their respective weights w1, w2, w3... the result is\n (x1 * w1 + x2 * w2 + x3 * w3 + ...) / (w1 + w2 + w3 + ...).
org.perfcake.message.sender.JmsSender.producer=JMS producer.
org.perfcake.validation.RulesValidator.rulesValidatorHelper=Rules helper that wraps the Drools logic.
org.perfcake.model.Scenario.Reporting.Reporter.Destination=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="period" maxOccurs\="unbounded" minOccurs\="0">\n           &lt;complexType>\n             &lt;complexContent>\n               &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n                 &lt;attribute name\="type" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n                 &lt;attribute name\="value" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n               &lt;/restriction>\n             &lt;/complexContent>\n           &lt;/complexType>\n         &lt;/element>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n       &lt;/sequence>\n       &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="enabled" type\="{http\://www.w3.org/2001/XMLSchema}boolean" default\="true" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.message.generator.profile.Profile.autoReplay=Sets whether we should start from the beginning when we hit the maximal defined profile time/iteration.
org.perfcake.scenario.ReplayResults.inputStream=Reading the recorded and serialized Measurement Units.
org.perfcake.message.ReceivedMessage.sentMessage=Original message that has been send (placeholders filled with values).
org.perfcake.message.generator.AbstractMessageGenerator.threads=Number of concurrent threads the generator will use to send the messages.
org.perfcake.message.generator.AbstractMessageGenerator.failFast=True when we should interrupt generating messages on error.
org.perfcake.reporting.reporter.accumulator.Range=Represents a mathematical range &lt;a, b).
org.perfcake.reporting.destination.c3chart.C3ChartHelper.COLUMN_PERCENT=Name of the percentage column.
org.perfcake.ide.core.model.components.SenderModel=Model of a Sender PerfCake inspector.
org.perfcake.message.sender.CommandSender.MessageFrom=The origin where the messages are taken from..
org.perfcake.reporting.destination.c3chart.C3ChartHelper.log=A logger for this class.
org.perfcake.message.sender.AbstractSender.log=The sender's logger.
org.perfcake.ide.core.components.ComponentCatalogue=ComponentCatalogue enables to obtain a list of PerfCake component implementations.
org.perfcake.reporting.reporter.WarmUpReporter.log=The reporter's logger.
org.perfcake.ide.core.model.components.ReceiverModel=Represents model of a Receiver.
org.perfcake.PerfCakeConst.KEYSTORES_DIR_PROPERTY=Name of the system property that specifies SSL key store directory.
org.perfcake.message.generator.ConstantSpeedMessageGenerator.buffer=Buffer of recent times when a task was added. Its size is equal to the speed, so the smallest\n time in the buffer (the oldest record) should be around 1000ms from now. Smaller time difference\n means that we are too fast. Larger time difference means we are too slow.
org.perfcake.message.sender.AbstractJmsSender.jndiSecurityCredentials=JNDI password.
org.perfcake.reporting.destination.c3chart.C3Chart.attributes=Attributes that should be stored from the Measurement.
org.perfcake.message.generator.AbstractMessageGenerator.sequenceManager=Manager of sequences that can be used to replace placeholders in a message template and sender's target.
org.perfcake.message.sender.ChannelSenderFile.fileChannel=Sender's fileChannel.
org.perfcake.message.sender.RequestResponseJmsSender.useCorrelationId=Should the correlation ID be used in the JMS communication? Turning it off (false) allows the sender to read any response from the response destination.
org.perfcake.util.Utils.DEFAULT_RESOURCES_DIR=Default name of resource directory.
org.perfcake.reporting.destination.CsvDestination.path=Output CSV file path.
org.perfcake.message.MessageTemplate.isStringMessage=True when the original message contains anything to be replaced.
org.perfcake.reporting.destination.c3chart.C3ChartHelper.initialized=Is the helper properly initialized without an exception? We cannot proceed on storing any data when this has failed.
org.perfcake.util.StringTemplate.replacements=Compiled data of the template. Property names to be replaced.
org.perfcake.reporting.reporter.accumulator.SumAccumulator.sum=Sum of the reported values.
org.perfcake.message.sender.HttpSender.method=The HTTP method that will be used.
org.perfcake.reporting.destination.ElasticsearchDestination.serverUrl=Comma separated list of Elastisearch servers including protocol and port number.
org.perfcake.reporting.reporter.MemoryUsageReporter.heapDumpSaved=A flag that indicates that a heap dump was saved after a possible memory leak has been detected.
org.perfcake.reporting.destination.ElasticsearchDestination.tagsArray=Cached array with tags.
org.perfcake.reporting.destination.ElasticsearchDestination.timeout=Elasticsearch client timeout.
org.perfcake.reporting.reporter.accumulator.HarmonicMeanAccumulator=Accumulates an harmonic mean.\n Atomic types are not used because both values must be set at the same time. Hence the methods are synchronized.
org.perfcake.reporting.reporter.accumulator.AbstractTimeSlidingWindowAccumulator=Accumulates a value over a set of recently reported values in a time sliding window.\n The sliding window is a time period in milliseconds.
org.perfcake.message.sender.MqttSender.mqttResponseConnection=MQTT connection for sending responses.
org.perfcake.reporting.ReportManager.reportingTasks=Executor to synchronize reporting, for reporting not to need to be thread safe. All reporting is executed out of\n sender threads, in a separate thread.
org.perfcake.reporting.destination.ConsoleDestination.prefix=Prefix of the console output.
org.perfcake.message.sequence.FilesContentSequence=The individual sequence values are read from external files listed as separate lines in the provided index text file.
org.perfcake.message.sender.JdbcSender.jdbcUrl=JDBC URL string.
org.perfcake.message.generator.SenderTask.reportManager=Reference to a report manager.
org.perfcake.model.ObjectFactory=This object contains factory methods for each \n Java content interface and Java element interface \n generated in the org.perfcake.model package. \n <p>An ObjectFactory allows you to programatically \n construct new instances of the Java representation \n for XML content. The Java representation of XML \n content can consist of schema derived interfaces \n and classes representing the binding of schema \n type definitions, element declarations and model \n groups.  Factory methods for each of these are \n provided in this class.
org.perfcake.reporting.reporter.StatsReporter.minimumEnabled=A property that determines if the metric of a minimal value is enabled or disabled.
org.perfcake.reporting.reporter.accumulator.TimeSlidingWindowMaxAccumulator=Accumulates maximal value over a set of recently reported values.
org.perfcake.message.generator.DefaultMessageGenerator.DaemonThreadFactory=Assigns nice names to threads that send messages and increases their default priority slightly.\n All threads are set at daemon by default for PerfCake to be able to finish even if some of then hung up.
org.perfcake.reporting.destination.c3chart.C3Chart.log=A logger for the class.
org.perfcake.message.sender.RequestResponseJmsSender.responseJndiSecurityPrincipal=JNDI username property for the response reception.
org.perfcake.common.PeriodType.ITERATION=Period based on number of occurrences.
org.perfcake.reporting.reporter.Reporter=A contract of Reporter. Reporter takes\n multiple {@link org.perfcake.reporting.MeasurementUnit Measurement Units} and combines\n them into a single {@link org.perfcake.reporting.Measurement Measurement}. The core method\n is {@link \#report(MeasurementUnit) report()} that is called each time a new measurement unit is ready.\n Reporter should not report anything unless it has been started with the {@link \#start() start()} method.\n If it is properly started, it should regularly report to all\n registered destinations depending on the configured reporting periods. Reporter can assume\n that {@link org.perfcake.RunInfo RunInfo} has been set before calling\n the {@link \#start() start()} method. It is the pure responsibility of Reporter to publish measurement\n results to destination in the configured periods. All period types must be supported.\n For easier development, it is advised to inherit from {@link AbstractReporter} which provides\n some common functionality including proper results publishing. One should directly implement\n this interface only when there is a serious reason.\n Reporter must be thread safe as it can be called from multiple threads at the same time.
org.perfcake.PerfCakeConst.DEBUG_AGENT_NAME_PROPERTY=Name of the system property that stores the debug agent name.
org.perfcake.message.sender.DummySender.isDebugEnabled=We need to cache the value to be really fast.
org.perfcake.message.receiver.Receiver.correlator=Sets the correlator that will be handling the responses.
org.perfcake.scenario.ReplayResults.log=The logger.
org.perfcake.common.PeriodType.TIME=Period base on time units, typically milliseconds.
org.perfcake.message.sender.AbstractJmsSender.mess=JMS message to send.
org.perfcake.ide.core.model.Property=Represents a property of a model.
org.perfcake.reporting.reporter.GeolocationReporter.Geolocation=Carries deserialized JSON data.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter=<p>Reports response time in milliseconds using <a href\="https\://github.com/HdrHistogram/HdrHistogram">HDR Histogram</a> that can\n computationally correct the Coordinated omission problem.</p>\n\n <p>The following paragraphs are based on <a href\="https\://github.com/HdrHistogram/HdrHistogram/blob/master/README.md">the HDR Histogram documentation</a>.</p>\n\n <p>This reporter depends on the features introduced by HDR Histogram to correct the coordinated omission.\n To compensate for the loss of sampled values when a recorded value is larger than the expected,\n interval between value samples, HDR Histogram will auto-generate an additional series of decreasingly-smaller value records.\n The values go down to the {@link \#expectedValue} in case of the {@link Correction\#USER} correction mode, or down to the average response time in\n case of the {@link Correction\#AUTO} correction mode.</p>\n\n <p>The reporter could be configured to track the counts of observed response times in milliseconds between 0 and 3,600,000\n ({@link \#maxExpectedValue}) while maintaining a value precision of 3 ({@link \#precision}) significant digits across that range.\n Value quantization within the range will thus be no larger than 1/1,000th (or 0.1%) of any value. This example reporter could be used to track\n and analyze the counts of observed response times ranging between 1 millisecond and 1 hour in magnitude, while maintaining a value resolution\n of 1 millisecond (or better) up to one second, and a resolution of 1 second (or better) up to 1,000 seconds.\n At its maximum tracked value (1 hour), it would still maintain a resolution of 3.6 seconds (or better).</p>
org.perfcake.PerfCakeConst.DEBUG_AGENT_NAME_OPT=Name of the cli argument to start debugging agent name.
org.perfcake.validation.ValidatorUtil.Operator.ENDS_WITH=Uses {@link java.lang.String\#endsWith(String)} )}.
org.perfcake.ide.core.exception.ModelException=Represents exception in model.
org.perfcake.message.sender.JdbcSender.driverClass=JDBC driver class.
org.perfcake.message.sender.HttpSender.expectedResponseCodeList=The list of response codes that are expected to be returned by HTTP response.
org.perfcake.reporting.destination.CsvDestination.csvFile=Output CSV file.
org.perfcake.validation.DictionaryValidator=Creates a dictionary of valid responses and use this to validate them in another run.\n It is also possible to create the dictionary manually, however, this is too complicated task and we always\n recommend running the validation in record mode first. Any manual changes can be done later.\n Dictionary validator creates an index file and a separate file for each response. A writable directory must\n be specified. The default index file name can be redefined. The response file names are based on hash codes of\n the original messages. Empty, null or equal messages will overwrite the file but this is not the intended use\n of this validator. Index file is never overwritten, if you really insist on recreating it, please rename or\n delete the file manually (this is for safety reasons).\n It is not sufficient to store just the index as it is likely that the correct messages will be manually\n modified after they are recorded.
org.perfcake.model.Scenario.Sequences.Sequence=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n       &lt;/sequence>\n       &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.reporting.reporter.StatsReporter.histogram=A comma separated list of values where the histogram is split to individual ranges.
org.perfcake.message.generator.ConstantSpeedMessageGenerator.speed=The desired constant speed in messages per second.
org.perfcake.message.sender.Jms11Sender.log=The sender's logger.
org.perfcake.message.sender.HttpSender.Method=Enumeration on available HTTP methods.
org.perfcake.message.sender.AbstractJmsSender.jndiSecurityPrincipal=JNDI username property.
org.perfcake.reporting.destination.c3chart.C3ChartReport.COMBINED_PREFIX=Prefix of the files of the charts created as a combination of measured results.
org.perfcake.reporting.destination.c3chart.C3ChartReport.DescriptionFileFilter=A file filter for description files.
org.perfcake.message.generator.profile.AbstractProfile=Facilitates development of custom message generation profiles.\n The only method to implement is {@link \#doLoadProfile(String)}. The rest is handled by this class.
org.perfcake.message.receiver.HttpReceiver=Receives responses using HTTP.
org.perfcake.message.sender.CommandSender.writer=The writer that is used to pass the message payload to the command's process standard input stream.
org.perfcake.validation.DictionaryValidator.indexChecked=Did we check the existence of the directory index? We never ever allow its overwrite in the record mode.
org.perfcake.message.correlator.AbstractCorrelator=Default implementation of a correlator that provides an easy way to extend it by providing\n the minimum functionality that is necessary, which is correlation id extraction from request and response.\n The response must never be received prior to sending a request. This might look like an obvious statement\n but there are cases when this optimization can play a role.
org.perfcake.reporting.destination.ChartDestination.xAxisType=The type of the X axis. It can display the overall progress of the test in Percents, Time, or Iteration numbers.
org.perfcake.message.correlator.GenerateHeaderCorrelator=Generates a new random UUID and sets it as a message header. Than expects the same header in the response.
org.perfcake.message.sequence.FileLinesSequence=Every single line in a given input file specifies a value of this sequence.\n Once the end of the file is hit, the sequence starts from beginning.\n The whole file is read in the memory, so make sure the file is of a reasonable size\n given your expectations and memory limits.
org.perfcake.message.sender.AbstractJmsSender.replyTo=JMS replyTo address.
org.perfcake.reporting.destination.ChartDestination.xAxis=X axis legend.
org.perfcake.reporting.destination.ConsoleDestination.CSI=ANSI Control Sequence Introducer.
org.perfcake.message.sequence.Sequence=Represents an automatically generated sequence of values.\n The resulting values can be used in the message body.
org.perfcake.message.sender.CamelSender=Sends requests to a Camel endpoint which extends the variety of protocols PerfCake can support.\n Do not forget to add Camel components on the classpath (in ext directory).
org.perfcake.util.TimerBenchmark=Measures the resolution of System.nanoTime() in the current system.\n Purpose of this is purely informative to the end user.
org.perfcake.message.receiver.HttpReceiver.server=Cached HTTP server so it can be stopped.
org.perfcake.ide.core.model.PropertyInfo.maxOccurs=Maximum number of occurrences of this property. Set to -1 for unlimited.
org.perfcake.message.generator.MessageGenerator.runInfo=Sets the current {@link org.perfcake.RunInfo} to control generating of the messages.
org.perfcake.PerfCakeConst.ERR_SCENARIO_EXECUTION=Exit code when there was an error during scenario execution.
org.perfcake.message.sender.JdbcSender.username=JDBC username.
org.perfcake.reporting.reporter.accumulator.Histogram.ranges=Ranges of the histogram.
org.perfcake.message.sender.RequestResponseJms11Sender.responseJndiSecurityPrincipal=JNDI username property for the response reception.
org.perfcake.message.generator.MessageGenerator.sequenceManager=Sets a manager of sequences that can be used to replace placeholders in a message template and sender's target.
org.perfcake.message.sender.RequestResponseJms11Sender.responseSession=JMS session to the response destination.
org.perfcake.reporting.BinaryScalableQuantity=A number with a unit scalable by binary system prefixes.
org.perfcake.ide.core.model.PropertyInfo.type=Represent which model is used in order to represent this property.
org.perfcake.PerfCakeConst.ERR_VALIDATION=Exit code when there were validation errors.
org.perfcake.scenario.ScenarioFactory=Interface of factories that can load a scenario from various resources.
org.perfcake.message.sender.RequestResponseJmsSender=Sends messages and receives responses over JMS.
org.perfcake.reporting.ReportManager.reporters=Set of reporters registered for reporting.
org.perfcake.reporting.reporter.ResponseTimeHistogramReporter.prefix=Prefix of the percentile keys in the result map.
org.perfcake.message.sender.ChannelSenderDatagram=Sends messages through NIO DatagramChannel.
org.perfcake.reporting.destination.c3chart.C3ChartDataFile.chart=Chart meta-data.
org.perfcake.reporting.reporter.StatsReporter.histogramCounter=The actual histogram representation.
org.perfcake.message.generator.MessageGenerator.validationManager=Configures the {@link org.perfcake.validation.ValidationManager} to be used for the performance test execution.
org.perfcake.util.StringTemplate=Holds a template capable of replacing properties in form of ${property} and @{property} to their values.\n The properties with the dollar sign are replaced only once, while the properties with the "at" sign are replaced with each call\n to {@link \#toString(Properties)} with the current values (this simulates JavaEE EL). System properties can be accessed using the props. prefix,\n and environment properties can be accessed using the env. prefix.\n Automatically provides environment properties, system properties and user specified properties.\n Default values are separated by semicolon (e.g. ${property\:defaultValue}). The property name must contain only letters, numbers and underscores\n (this is not strictly checked but may lead to undefined behaviour).\n Backslash works as a general escape character and escapes any letter behind it (e.g. \\\\ is replaced by \\, \\@ is replaced by @ etc.).\n Examples\: ${propertyA} ${non_existing\:default} ${env.JAVA_HOME} ${props['java.runtime.name']}\n Notice\: The first call to the constructor and calls to the static method {@link \#parseTemplate(String, Properties)} might take more time than a simple RegExp\n match but this is payed back for the subsequent calls to {@link \#toString()}.
org.perfcake.message.sender.ChannelSenderSocket.socketChannel=Sender's SocketChannel.
org.perfcake.message.sender.LdapSender=Queries LDAP server.
org.perfcake.message.sender.RequestResponseJmsSender.responseUsername=JMS username used for the response reception.
org.perfcake.message.sender.RequestResponseJms11Sender.responseJndiUrl=JNDI URL property for the response reception.
org.perfcake.util.StringTemplate.properties=Global properties passed in while creating the template.
org.perfcake.reporting.reporter.Reporter.reportManager=Sets {@link org.perfcake.reporting.ReportManager Report Manager} for the report to be able to control and\n monitor the current status of reporting.
org.perfcake.PerfCakeConst.PLUGINS_DIR_PROPERTY=Name of the system property that stores path where PerfCake plugins are loaded from.
org.perfcake.validation.RulesValidatorHelper.assertions=Assertions checked by the helper.
org.perfcake.ide.core.model.AbstractProperty.propertyInfo=Metadata about this property type. This field is filled in only when property is being added into some {@link PropertyContainer}.
org.perfcake.reporting.destination.ElasticsearchDestination.type=Elasticsearch type name.
org.perfcake.message.sequence.FilesContentSequence.cache=Cache of files content.
org.perfcake.model.Scenario.Validation.Validator=<p>Java class for anonymous complex type.\n \n <p>The following schema fragment specifies the expected content contained within this class.\n \n <pre>\n &lt;complexType>\n   &lt;complexContent>\n     &lt;restriction base\="{http\://www.w3.org/2001/XMLSchema}anyType">\n       &lt;sequence>\n         &lt;element name\="property" type\="{urn\:perfcake\:scenario\:7.0}propertyType" maxOccurs\="unbounded" minOccurs\="0"/>\n       &lt;/sequence>\n       &lt;attribute name\="id" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n       &lt;attribute name\="class" type\="{http\://www.w3.org/2001/XMLSchema}string" />\n     &lt;/restriction>\n   &lt;/complexContent>\n &lt;/complexType>\n </pre>
org.perfcake.reporting.destination.InfluxDbDestination.keyStore=SSL key store location.
org.perfcake.reporting.destination.c3chart.C3Chart.COLUMN_TIME=Name of the time column.
org.perfcake.reporting.MetricScalableQuantity=A number with a unit scalable by metric system prefixes.
org.perfcake.message.generator.RampUpDownGenerator.postThreadCount=A final number of threads.
org.perfcake.message.sender.ChannelSenderDatagram.address=Encoded target address.
org.perfcake.ide.core.components.ReflectionComponentCatalogue.packagesToScan=List of packages prefixes where to search for the components.
org.perfcake.message.sender.ChannelSender.responseBuffer=A byte buffer to store the response.
org.perfcake.debug.PerfCakeDebug.validatorIds=Internal map of validators and their ids for later reporting.
org.perfcake.message.sender.RequestResponseJms11Sender.autoAck=Indicates whether the JMS message is auto-acknowledged by the receiver (true) or by client (false).
org.perfcake.reporting.reporter.accumulator.AbstractSlidingWindowAccumulator=Accumulates a value over a set of recently reported values in a sliding window.\n The sliding window is a number of last values that are accumulated.
org.perfcake.message.sender.CommandSender.reader=The reader that is used to read the response from the command's process standard output stream.
org.perfcake.reporting.ReportManager.log=Logger of the class.
org.perfcake.message.receiver.AbstractReceiver.correlator=The correlator to register responses.
org.perfcake.ide.core.components.ReflectionComponentCatalogue=Represents an catalogue of PerfCake components on the classpath.
org.perfcake.message.sender.AbstractJmsSender.username=JMS username.
org.perfcake.reporting.destination.c3chart.C3ChartDataFile=Representation of all data files needed to write a chart to the disk. Also handles directory creation and copies basic html files and their dependencies.
org.perfcake.validation.ValidatorUtil.Operator.MATCHES=Uses {@link java.lang.String\#matches(String)}.
org.perfcake.message.sender.CamelSender.template=Message producer.
org.perfcake.message.generator.profile.ProfileRequest.speed=The requested speed of sending messages in messages per second.
org.perfcake.message.generator.CustomProfileGenerator.lastTime=When did we reconfigured the generator for the last time.
org.perfcake.ide.core.model.PropertyInfo=Contains metadata about property of a model class.
org.perfcake.PerfCakeConst.ERR_PRINT_HELP=Error while trying to replay scenario.
org.perfcake.message.receiver.AbstractAutoSpawnReceiver.log=Receiver's logger.
org.perfcake.PerfCakeConst.DISABLE_TEMPLATES_PROPERTY=Property that can disable templating engine (HTTL) in {@link org.perfcake.util.StringTemplate}.
org.perfcake.message.generator.profile.CsvProfile=Loads a message generation profile from a CSV file in the format <code>&lt;time&gt;;&lt;threads&gt;;&lt;speed&gt;</code>.\n The entries are sorted. The time can be either an iteration number or a time in milliseconds depending on the test scenario\n definition (run defined by number of iterations or by time).
org.perfcake.message.sender.GroovySender=Executes an external Groovy script and pass the message\n payload via the standard input or as a command argument. It extends the {@link CommandSender} and\n executes the groovy script via groovy command with <code>groovy {@link \#target}</code> passed as an argument.
org.perfcake.validation.ValidationManager=Validates message responses returned by {@link org.perfcake.message.sender.MessageSender}\n using a set of {@link org.perfcake.validation.MessageValidator} instances.
org.perfcake.validation.ValidatorUtil.MessagePart.PROPERTY=Message property.
org.perfcake.debug.PerfCakeDebug.receiverClass=Class name of the receiver used.
org.perfcake.ide.core.model.AbstractModel=Represents model of a PerfCake inspector.
org.perfcake.PerfCakeConst.REAL_TIME_TAG=Result name of the test execution real time tag.
org.perfcake.message.sender.HttpSender.currentMethod=HTTP method that should be used for the current send operation, pre-calculated in {@link \#preSend(Message, Map, Properties)}.
org.perfcake.message.sender.WebSocketSender.RemoteEndpointType=Remote endpoint type.
org.perfcake.message.correlator.AbstractCorrelator.waitingTasks=Active tasks waiting for the response. We must never receive a response before the request.
org.perfcake.message.generator.DefaultMessageGenerator.log=The generator's logger.
org.perfcake.common.TimeSlidingWindow.TemporalObject.object=The object carried.
org.perfcake.reporting.reporter.WarmUpReporter=Determines when the tested system is warmed up. The warming is enabled/disabled by the presence of the {@link WarmUpReporter} in the scenario. The minimal iteration count and\n the warm-up period duration can be tweaked by the respective properties ({@link \#minimalWarmUpCount} with the default value of 10,000 and {@link \#minimalWarmUpDuration} with the default value of\n 15,000 ms).\n <p>\n The system is considered warmed up when all of the following conditions are satisfied\: The iteration length is not changing much over the time, the minimal iteration count has been executed and the\n minimal duration from the very start has exceeded.\n </p>
org.perfcake.reporting.destination.ChartDestination.outputPath=Where to store the charts.
org.perfcake.message.sender.AbstractJmsSender.transacted=Indicates whether the JMS transport is transacted or not.
org.perfcake.reporting.reporter.accumulator.TimeSlidingWindowAvgAccumulator=Accumulates average over a set of recently reported values.
